/*
 * generated by Xtext
 */
package org.molymer.conf.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.molymer.conf.services.ConfigDslGrammarAccess;

public class ConfigDslParser extends AbstractContentAssistParser {
	
	@Inject
	private ConfigDslGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.molymer.conf.ui.contentassist.antlr.internal.InternalConfigDslParser createParser() {
		org.molymer.conf.ui.contentassist.antlr.internal.InternalConfigDslParser result = new org.molymer.conf.ui.contentassist.antlr.internal.InternalConfigDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getConfigAccess().getGroup(), "rule__Config__Group__0");
					put(grammarAccess.getConfigAccess().getGroup_16(), "rule__Config__Group_16__0");
					put(grammarAccess.getGeneratorAccess().getGroup(), "rule__Generator__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
					put(grammarAccess.getConfigAccess().getAppNameAssignment_4(), "rule__Config__AppNameAssignment_4");
					put(grammarAccess.getConfigAccess().getMainClassAssignment_7(), "rule__Config__MainClassAssignment_7");
					put(grammarAccess.getConfigAccess().getSrcFolderAssignment_10(), "rule__Config__SrcFolderAssignment_10");
					put(grammarAccess.getConfigAccess().getOutFolderAssignment_13(), "rule__Config__OutFolderAssignment_13");
					put(grammarAccess.getConfigAccess().getSelectorsAssignment_16_1(), "rule__Config__SelectorsAssignment_16_1");
					put(grammarAccess.getConfigAccess().getGeneratorsAssignment_17(), "rule__Config__GeneratorsAssignment_17");
					put(grammarAccess.getGeneratorAccess().getNameAssignment_0(), "rule__Generator__NameAssignment_0");
					put(grammarAccess.getGeneratorAccess().getBundleAssignment_2(), "rule__Generator__BundleAssignment_2");
					put(grammarAccess.getGeneratorAccess().getGenClassAssignment_4(), "rule__Generator__GenClassAssignment_4");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.molymer.conf.ui.contentassist.antlr.internal.InternalConfigDslParser typedParser = (org.molymer.conf.ui.contentassist.antlr.internal.InternalConfigDslParser) parser;
			typedParser.entryRuleConfig();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public ConfigDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(ConfigDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
