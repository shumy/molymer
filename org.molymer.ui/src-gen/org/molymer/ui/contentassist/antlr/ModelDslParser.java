/*
 * generated by Xtext
 */
package org.molymer.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.molymer.services.ModelDslGrammarAccess;

public class ModelDslParser extends AbstractContentAssistParser {
	
	@Inject
	private ModelDslGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.molymer.ui.contentassist.antlr.internal.InternalModelDslParser createParser() {
		org.molymer.ui.contentassist.antlr.internal.InternalModelDslParser result = new org.molymer.ui.contentassist.antlr.internal.InternalModelDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getElementAccess().getAlternatives(), "rule__Element__Alternatives");
					put(grammarAccess.getTypeAccess().getAlternatives(), "rule__Type__Alternatives");
					put(grammarAccess.getDataTypeFieldAccess().getAlternatives(), "rule__DataTypeField__Alternatives");
					put(grammarAccess.getPatternTypeAccess().getAlternatives(), "rule__PatternType__Alternatives");
					put(grammarAccess.getContainerAccess().getAlternatives(), "rule__Container__Alternatives");
					put(grammarAccess.getFieldAccess().getAlternatives(), "rule__Field__Alternatives");
					put(grammarAccess.getReferenceListAccess().getAlternatives_1(), "rule__ReferenceList__Alternatives_1");
					put(grammarAccess.getAnnotationMandatoryPropertyAccess().getAlternatives_2(), "rule__AnnotationMandatoryProperty__Alternatives_2");
					put(grammarAccess.getAnnotationOptionalPropertyAccess().getAlternatives_3(), "rule__AnnotationOptionalProperty__Alternatives_3");
					put(grammarAccess.getAnnotationValueAccess().getAlternatives(), "rule__AnnotationValue__Alternatives");
					put(grammarAccess.getAnnotatedAccess().getAlternatives(), "rule__Annotated__Alternatives");
					put(grammarAccess.getAnnoTypesAccess().getAlternatives(), "rule__AnnoTypes__Alternatives");
					put(grammarAccess.getRangeValueAccess().getAlternatives_0(), "rule__RangeValue__Alternatives_0");
					put(grammarAccess.getRangeValueAccess().getAlternatives_2(), "rule__RangeValue__Alternatives_2");
					put(grammarAccess.getValueAccess().getAlternatives(), "rule__Value__Alternatives");
					put(grammarAccess.getValueTypeAccess().getAlternatives(), "rule__ValueType__Alternatives");
					put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
					put(grammarAccess.getImportAccess().getGroup(), "rule__Import__Group__0");
					put(grammarAccess.getPackageAccess().getGroup(), "rule__Package__Group__0");
					put(grammarAccess.getDataTypeAccess().getGroup(), "rule__DataType__Group__0");
					put(grammarAccess.getDataTypeFieldAccess().getGroup_0(), "rule__DataTypeField__Group_0__0");
					put(grammarAccess.getEntityAccess().getGroup(), "rule__Entity__Group__0");
					put(grammarAccess.getEntityGroupAccess().getGroup(), "rule__EntityGroup__Group__0");
					put(grammarAccess.getEntityElementsAccess().getGroup(), "rule__EntityElements__Group__0");
					put(grammarAccess.getParentAccess().getGroup(), "rule__Parent__Group__0");
					put(grammarAccess.getChildAccess().getGroup(), "rule__Child__Group__0");
					put(grammarAccess.getPropertyAccess().getGroup(), "rule__Property__Group__0");
					put(grammarAccess.getReferenceAccess().getGroup(), "rule__Reference__Group__0");
					put(grammarAccess.getReferenceListAccess().getGroup(), "rule__ReferenceList__Group__0");
					put(grammarAccess.getReferenceListAccess().getGroup_1_0(), "rule__ReferenceList__Group_1_0__0");
					put(grammarAccess.getAnnotationAccess().getGroup(), "rule__Annotation__Group__0");
					put(grammarAccess.getAnnotationMandatoryPropertyAccess().getGroup(), "rule__AnnotationMandatoryProperty__Group__0");
					put(grammarAccess.getAnnotationMandatoryPropertyAccess().getGroup_2_1(), "rule__AnnotationMandatoryProperty__Group_2_1__0");
					put(grammarAccess.getAnnotationOptionalPropertyAccess().getGroup(), "rule__AnnotationOptionalProperty__Group__0");
					put(grammarAccess.getAnnotationOptionalPropertyAccess().getGroup_3_1(), "rule__AnnotationOptionalProperty__Group_3_1__0");
					put(grammarAccess.getAnnotationGroupAccess().getGroup(), "rule__AnnotationGroup__Group__0");
					put(grammarAccess.getAnnotationInstanceAccess().getGroup(), "rule__AnnotationInstance__Group__0");
					put(grammarAccess.getAnnotationInstanceAccess().getGroup_2(), "rule__AnnotationInstance__Group_2__0");
					put(grammarAccess.getAnnotationHiddenPropertyAccess().getGroup(), "rule__AnnotationHiddenProperty__Group__0");
					put(grammarAccess.getGroupTypeAccess().getGroup(), "rule__GroupType__Group__0");
					put(grammarAccess.getRangeValueAccess().getGroup(), "rule__RangeValue__Group__0");
					put(grammarAccess.getFormatRangeValueAccess().getGroup(), "rule__FormatRangeValue__Group__0");
					put(grammarAccess.getIntegerAccess().getGroup(), "rule__Integer__Group__0");
					put(grammarAccess.getDoubleAccess().getGroup(), "rule__Double__Group__0");
					put(grammarAccess.getQualifiedNameWithWildcardAccess().getGroup(), "rule__QualifiedNameWithWildcard__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
					put(grammarAccess.getModelAccess().getImportsAssignment_0(), "rule__Model__ImportsAssignment_0");
					put(grammarAccess.getModelAccess().getElementsAssignment_1(), "rule__Model__ElementsAssignment_1");
					put(grammarAccess.getImportAccess().getImportedNamespaceAssignment_1(), "rule__Import__ImportedNamespaceAssignment_1");
					put(grammarAccess.getPackageAccess().getAnnotationsAssignment_0(), "rule__Package__AnnotationsAssignment_0");
					put(grammarAccess.getPackageAccess().getNameAssignment_2(), "rule__Package__NameAssignment_2");
					put(grammarAccess.getPackageAccess().getElementsAssignment_4(), "rule__Package__ElementsAssignment_4");
					put(grammarAccess.getDataTypeAccess().getAnnotationsAssignment_0(), "rule__DataType__AnnotationsAssignment_0");
					put(grammarAccess.getDataTypeAccess().getNameAssignment_2(), "rule__DataType__NameAssignment_2");
					put(grammarAccess.getDataTypeAccess().getFormatedFieldsAssignment_4(), "rule__DataType__FormatedFieldsAssignment_4");
					put(grammarAccess.getDataTypeFieldAccess().getPatternAssignment_0_0(), "rule__DataTypeField__PatternAssignment_0_0");
					put(grammarAccess.getDataTypeFieldAccess().getFormatAssignment_0_1(), "rule__DataTypeField__FormatAssignment_0_1");
					put(grammarAccess.getDataTypeFieldAccess().getTypeAssignment_1(), "rule__DataTypeField__TypeAssignment_1");
					put(grammarAccess.getPatternTypeAccess().getREGEXAssignment_0(), "rule__PatternType__REGEXAssignment_0");
					put(grammarAccess.getPatternTypeAccess().getDATEAssignment_1(), "rule__PatternType__DATEAssignment_1");
					put(grammarAccess.getPatternTypeAccess().getNUMBERAssignment_2(), "rule__PatternType__NUMBERAssignment_2");
					put(grammarAccess.getEntityAccess().getAnnotationsAssignment_0(), "rule__Entity__AnnotationsAssignment_0");
					put(grammarAccess.getEntityAccess().getNameAssignment_2(), "rule__Entity__NameAssignment_2");
					put(grammarAccess.getEntityAccess().getParentAssignment_4(), "rule__Entity__ParentAssignment_4");
					put(grammarAccess.getEntityAccess().getElementsAssignment_5(), "rule__Entity__ElementsAssignment_5");
					put(grammarAccess.getEntityAccess().getGroupsAssignment_6(), "rule__Entity__GroupsAssignment_6");
					put(grammarAccess.getEntityGroupAccess().getNameAssignment_1(), "rule__EntityGroup__NameAssignment_1");
					put(grammarAccess.getEntityGroupAccess().getElementsAssignment_3(), "rule__EntityGroup__ElementsAssignment_3");
					put(grammarAccess.getEntityElementsAccess().getChildsAssignment_1_0(), "rule__EntityElements__ChildsAssignment_1_0");
					put(grammarAccess.getEntityElementsAccess().getPropertiesAssignment_1_1(), "rule__EntityElements__PropertiesAssignment_1_1");
					put(grammarAccess.getEntityElementsAccess().getReferencesAssignment_1_2(), "rule__EntityElements__ReferencesAssignment_1_2");
					put(grammarAccess.getEntityElementsAccess().getReferenceListsAssignment_1_3(), "rule__EntityElements__ReferenceListsAssignment_1_3");
					put(grammarAccess.getParentAccess().getTypeAssignment_1(), "rule__Parent__TypeAssignment_1");
					put(grammarAccess.getParentAccess().getAnnotationsAssignment_2(), "rule__Parent__AnnotationsAssignment_2");
					put(grammarAccess.getChildAccess().getTypeAssignment_1(), "rule__Child__TypeAssignment_1");
					put(grammarAccess.getChildAccess().getAnnotationsAssignment_2(), "rule__Child__AnnotationsAssignment_2");
					put(grammarAccess.getPropertyAccess().getNameAssignment_0(), "rule__Property__NameAssignment_0");
					put(grammarAccess.getPropertyAccess().getOptionalAssignment_1(), "rule__Property__OptionalAssignment_1");
					put(grammarAccess.getPropertyAccess().getTypeAssignment_3(), "rule__Property__TypeAssignment_3");
					put(grammarAccess.getPropertyAccess().getAnnotationsAssignment_4(), "rule__Property__AnnotationsAssignment_4");
					put(grammarAccess.getReferenceAccess().getNameAssignment_0(), "rule__Reference__NameAssignment_0");
					put(grammarAccess.getReferenceAccess().getOptionalAssignment_1(), "rule__Reference__OptionalAssignment_1");
					put(grammarAccess.getReferenceAccess().getEntityAssignment_3(), "rule__Reference__EntityAssignment_3");
					put(grammarAccess.getReferenceAccess().getAnnotationsAssignment_4(), "rule__Reference__AnnotationsAssignment_4");
					put(grammarAccess.getReferenceListAccess().getNameAssignment_0(), "rule__ReferenceList__NameAssignment_0");
					put(grammarAccess.getReferenceListAccess().getReferenceAssignment_1_0_1(), "rule__ReferenceList__ReferenceAssignment_1_0_1");
					put(grammarAccess.getReferenceListAccess().getEntityAssignment_2(), "rule__ReferenceList__EntityAssignment_2");
					put(grammarAccess.getReferenceListAccess().getAnnotationsAssignment_3(), "rule__ReferenceList__AnnotationsAssignment_3");
					put(grammarAccess.getAnnotationAccess().getTypesAssignment_1(), "rule__Annotation__TypesAssignment_1");
					put(grammarAccess.getAnnotationAccess().getInstancesAssignment_2(), "rule__Annotation__InstancesAssignment_2");
					put(grammarAccess.getAnnotationAccess().getNameAssignment_5(), "rule__Annotation__NameAssignment_5");
					put(grammarAccess.getAnnotationAccess().getMandatoriesAssignment_7(), "rule__Annotation__MandatoriesAssignment_7");
					put(grammarAccess.getAnnotationAccess().getOptionalsAssignment_8(), "rule__Annotation__OptionalsAssignment_8");
					put(grammarAccess.getAnnotationMandatoryPropertyAccess().getNameAssignment_0(), "rule__AnnotationMandatoryProperty__NameAssignment_0");
					put(grammarAccess.getAnnotationMandatoryPropertyAccess().getGroupAssignment_2_0(), "rule__AnnotationMandatoryProperty__GroupAssignment_2_0");
					put(grammarAccess.getAnnotationMandatoryPropertyAccess().getTypeAssignment_2_1_0(), "rule__AnnotationMandatoryProperty__TypeAssignment_2_1_0");
					put(grammarAccess.getAnnotationMandatoryPropertyAccess().getMultiAssignment_2_1_1(), "rule__AnnotationMandatoryProperty__MultiAssignment_2_1_1");
					put(grammarAccess.getAnnotationOptionalPropertyAccess().getNameAssignment_0(), "rule__AnnotationOptionalProperty__NameAssignment_0");
					put(grammarAccess.getAnnotationOptionalPropertyAccess().getGroupAssignment_3_0(), "rule__AnnotationOptionalProperty__GroupAssignment_3_0");
					put(grammarAccess.getAnnotationOptionalPropertyAccess().getTypeAssignment_3_1_0(), "rule__AnnotationOptionalProperty__TypeAssignment_3_1_0");
					put(grammarAccess.getAnnotationOptionalPropertyAccess().getMultiAssignment_3_1_1(), "rule__AnnotationOptionalProperty__MultiAssignment_3_1_1");
					put(grammarAccess.getAnnotationGroupAccess().getInstancesAssignment_1(), "rule__AnnotationGroup__InstancesAssignment_1");
					put(grammarAccess.getAnnotationInstanceAccess().getAnnotationAssignment_0(), "rule__AnnotationInstance__AnnotationAssignment_0");
					put(grammarAccess.getAnnotationInstanceAccess().getValuesAssignment_1(), "rule__AnnotationInstance__ValuesAssignment_1");
					put(grammarAccess.getAnnotationInstanceAccess().getPropertiesAssignment_2_1(), "rule__AnnotationInstance__PropertiesAssignment_2_1");
					put(grammarAccess.getAnnotationHiddenPropertyAccess().getPropertyAssignment_0(), "rule__AnnotationHiddenProperty__PropertyAssignment_0");
					put(grammarAccess.getAnnotationHiddenPropertyAccess().getValuesAssignment_1(), "rule__AnnotationHiddenProperty__ValuesAssignment_1");
					put(grammarAccess.getGroupTypeAccess().getTypeAssignment_0(), "rule__GroupType__TypeAssignment_0");
					put(grammarAccess.getGroupTypeAccess().getNameAssignment_1(), "rule__GroupType__NameAssignment_1");
					put(grammarAccess.getPackageTypeAccess().getTypeAssignment(), "rule__PackageType__TypeAssignment");
					put(grammarAccess.getDataTypeTypeAccess().getTypeAssignment(), "rule__DataTypeType__TypeAssignment");
					put(grammarAccess.getAnnotationTypeAccess().getTypeAssignment(), "rule__AnnotationType__TypeAssignment");
					put(grammarAccess.getEntityTypeAccess().getTypeAssignment(), "rule__EntityType__TypeAssignment");
					put(grammarAccess.getPropertyTypeAccess().getTypeAssignment(), "rule__PropertyType__TypeAssignment");
					put(grammarAccess.getReferenceTypeAccess().getTypeAssignment(), "rule__ReferenceType__TypeAssignment");
					put(grammarAccess.getReferenceListTypeAccess().getTypeAssignment(), "rule__ReferenceListType__TypeAssignment");
					put(grammarAccess.getParentTypeAccess().getTypeAssignment(), "rule__ParentType__TypeAssignment");
					put(grammarAccess.getChildTypeAccess().getTypeAssignment(), "rule__ChildType__TypeAssignment");
					put(grammarAccess.getStringValueAccess().getValueAssignment(), "rule__StringValue__ValueAssignment");
					put(grammarAccess.getIntegerValueAccess().getValueAssignment(), "rule__IntegerValue__ValueAssignment");
					put(grammarAccess.getDoubleValueAccess().getValueAssignment(), "rule__DoubleValue__ValueAssignment");
					put(grammarAccess.getRangeValueAccess().getFromAssignment_0_0(), "rule__RangeValue__FromAssignment_0_0");
					put(grammarAccess.getRangeValueAccess().getFromInfAssignment_0_1(), "rule__RangeValue__FromInfAssignment_0_1");
					put(grammarAccess.getRangeValueAccess().getToAssignment_2_0(), "rule__RangeValue__ToAssignment_2_0");
					put(grammarAccess.getRangeValueAccess().getToInfAssignment_2_1(), "rule__RangeValue__ToInfAssignment_2_1");
					put(grammarAccess.getFormatRangeValueAccess().getFromAssignment_0(), "rule__FormatRangeValue__FromAssignment_0");
					put(grammarAccess.getFormatRangeValueAccess().getToAssignment_2(), "rule__FormatRangeValue__ToAssignment_2");
					put(grammarAccess.getEntityElementsAccess().getUnorderedGroup_1(), "rule__EntityElements__UnorderedGroup_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.molymer.ui.contentassist.antlr.internal.InternalModelDslParser typedParser = (org.molymer.ui.contentassist.antlr.internal.InternalModelDslParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_END_LINE", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public ModelDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(ModelDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
