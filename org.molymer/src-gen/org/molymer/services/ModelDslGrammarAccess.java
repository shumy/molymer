/*
 * generated by Xtext
 */
package org.molymer.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class ModelDslGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cImportsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cImportsImportParserRuleCall_0_0 = (RuleCall)cImportsAssignment_0.eContents().get(0);
		private final Assignment cElementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementsElementParserRuleCall_1_0 = (RuleCall)cElementsAssignment_1.eContents().get(0);
		
		//Model:
		//	imports+=Import* elements+=Element*;
		@Override public ParserRule getRule() { return rule; }

		//imports+=Import* elements+=Element*
		public Group getGroup() { return cGroup; }

		//imports+=Import*
		public Assignment getImportsAssignment_0() { return cImportsAssignment_0; }

		//Import
		public RuleCall getImportsImportParserRuleCall_0_0() { return cImportsImportParserRuleCall_0_0; }

		//elements+=Element*
		public Assignment getElementsAssignment_1() { return cElementsAssignment_1; }

		//Element
		public RuleCall getElementsElementParserRuleCall_1_0() { return cElementsElementParserRuleCall_1_0; }
	}

	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0 = (RuleCall)cImportedNamespaceAssignment_1.eContents().get(0);
		
		//Import:
		//	"import" importedNamespace=QualifiedNameWithWildcard;
		@Override public ParserRule getRule() { return rule; }

		//"import" importedNamespace=QualifiedNameWithWildcard
		public Group getGroup() { return cGroup; }

		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//importedNamespace=QualifiedNameWithWildcard
		public Assignment getImportedNamespaceAssignment_1() { return cImportedNamespaceAssignment_1; }

		//QualifiedNameWithWildcard
		public RuleCall getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0() { return cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0; }
	}

	public class ElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Element");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAnnotationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPackageParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		////all elements have annotations
		//Element:
		//	Type | Annotation | Package;
		@Override public ParserRule getRule() { return rule; }

		//Type | Annotation | Package
		public Alternatives getAlternatives() { return cAlternatives; }

		//Type
		public RuleCall getTypeParserRuleCall_0() { return cTypeParserRuleCall_0; }

		//Annotation
		public RuleCall getAnnotationParserRuleCall_1() { return cAnnotationParserRuleCall_1; }

		//Package
		public RuleCall getPackageParserRuleCall_2() { return cPackageParserRuleCall_2; }
	}

	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEntityParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDataTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Type:
		//	Entity | DataType;
		@Override public ParserRule getRule() { return rule; }

		//Entity | DataType
		public Alternatives getAlternatives() { return cAlternatives; }

		//Entity
		public RuleCall getEntityParserRuleCall_0() { return cEntityParserRuleCall_0; }

		//DataType
		public RuleCall getDataTypeParserRuleCall_1() { return cDataTypeParserRuleCall_1; }
	}

	public class PackageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Package");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationGroupParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cPackageKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cElementsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cElementsElementParserRuleCall_4_0 = (RuleCall)cElementsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Package:
		//	annotations+=AnnotationGroup* "package" name=ID "{" elements+=Element* "}";
		@Override public ParserRule getRule() { return rule; }

		//annotations+=AnnotationGroup* "package" name=ID "{" elements+=Element* "}"
		public Group getGroup() { return cGroup; }

		//annotations+=AnnotationGroup*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//AnnotationGroup
		public RuleCall getAnnotationsAnnotationGroupParserRuleCall_0_0() { return cAnnotationsAnnotationGroupParserRuleCall_0_0; }

		//"package"
		public Keyword getPackageKeyword_1() { return cPackageKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//elements+=Element*
		public Assignment getElementsAssignment_4() { return cElementsAssignment_4; }

		//Element
		public RuleCall getElementsElementParserRuleCall_4_0() { return cElementsElementParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class DataTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DataType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationGroupParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cDatatypeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cFormatedFieldsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFormatedFieldsDataTypeFieldParserRuleCall_4_0 = (RuleCall)cFormatedFieldsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		////BEGIN datatypes----------------------------------------------------------------------------------
		//DataType:
		//	annotations+=AnnotationGroup* "datatype" name=ID "{" formatedFields+=DataTypeField* "}";
		@Override public ParserRule getRule() { return rule; }

		//annotations+=AnnotationGroup* "datatype" name=ID "{" formatedFields+=DataTypeField* "}"
		public Group getGroup() { return cGroup; }

		//annotations+=AnnotationGroup*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//AnnotationGroup
		public RuleCall getAnnotationsAnnotationGroupParserRuleCall_0_0() { return cAnnotationsAnnotationGroupParserRuleCall_0_0; }

		//"datatype"
		public Keyword getDatatypeKeyword_1() { return cDatatypeKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//formatedFields+=DataTypeField*
		public Assignment getFormatedFieldsAssignment_4() { return cFormatedFieldsAssignment_4; }

		//DataTypeField
		public RuleCall getFormatedFieldsDataTypeFieldParserRuleCall_4_0() { return cFormatedFieldsDataTypeFieldParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class DataTypeFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DataTypeField");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cPatternAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cPatternPatternTypeParserRuleCall_0_0_0 = (RuleCall)cPatternAssignment_0_0.eContents().get(0);
		private final Assignment cFormatAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cFormatPATTERN_STRINGTerminalRuleCall_0_1_0 = (RuleCall)cFormatAssignment_0_1.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final CrossReference cTypeDataTypeCrossReference_1_0 = (CrossReference)cTypeAssignment_1.eContents().get(0);
		private final RuleCall cTypeDataTypeQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cTypeDataTypeCrossReference_1_0.eContents().get(1);
		
		//DataTypeField:
		//	pattern=PatternType format=PATTERN_STRING | type=[DataType|QualifiedName];
		@Override public ParserRule getRule() { return rule; }

		//pattern=PatternType format=PATTERN_STRING | type=[DataType|QualifiedName]
		public Alternatives getAlternatives() { return cAlternatives; }

		//pattern=PatternType format=PATTERN_STRING
		public Group getGroup_0() { return cGroup_0; }

		//pattern=PatternType
		public Assignment getPatternAssignment_0_0() { return cPatternAssignment_0_0; }

		//PatternType
		public RuleCall getPatternPatternTypeParserRuleCall_0_0_0() { return cPatternPatternTypeParserRuleCall_0_0_0; }

		//format=PATTERN_STRING
		public Assignment getFormatAssignment_0_1() { return cFormatAssignment_0_1; }

		//PATTERN_STRING
		public RuleCall getFormatPATTERN_STRINGTerminalRuleCall_0_1_0() { return cFormatPATTERN_STRINGTerminalRuleCall_0_1_0; }

		//type=[DataType|QualifiedName]
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//[DataType|QualifiedName]
		public CrossReference getTypeDataTypeCrossReference_1_0() { return cTypeDataTypeCrossReference_1_0; }

		//QualifiedName
		public RuleCall getTypeDataTypeQualifiedNameParserRuleCall_1_0_1() { return cTypeDataTypeQualifiedNameParserRuleCall_1_0_1; }
	}

	public class PatternTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PatternType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cREGEXAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cREGEXRegexKeyword_0_0 = (Keyword)cREGEXAssignment_0.eContents().get(0);
		private final Assignment cDATEAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cDATEDateKeyword_1_0 = (Keyword)cDATEAssignment_1.eContents().get(0);
		private final Assignment cNUMBERAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Keyword cNUMBERNumberKeyword_2_0 = (Keyword)cNUMBERAssignment_2.eContents().get(0);
		
		//PatternType:
		//	REGEX="@regex" | DATE="@date" | NUMBER="@number";
		@Override public ParserRule getRule() { return rule; }

		//REGEX="@regex" | DATE="@date" | NUMBER="@number"
		public Alternatives getAlternatives() { return cAlternatives; }

		//REGEX="@regex"
		public Assignment getREGEXAssignment_0() { return cREGEXAssignment_0; }

		//"@regex"
		public Keyword getREGEXRegexKeyword_0_0() { return cREGEXRegexKeyword_0_0; }

		//DATE="@date"
		public Assignment getDATEAssignment_1() { return cDATEAssignment_1; }

		//"@date"
		public Keyword getDATEDateKeyword_1_0() { return cDATEDateKeyword_1_0; }

		//NUMBER="@number"
		public Assignment getNUMBERAssignment_2() { return cNUMBERAssignment_2; }

		//"@number"
		public Keyword getNUMBERNumberKeyword_2_0() { return cNUMBERNumberKeyword_2_0; }
	}

	public class EntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Entity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationGroupParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cEntityKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cParentAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cParentParentParserRuleCall_4_0 = (RuleCall)cParentAssignment_4.eContents().get(0);
		private final Assignment cElementsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cElementsEntityElementsParserRuleCall_5_0 = (RuleCall)cElementsAssignment_5.eContents().get(0);
		private final Assignment cGroupsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cGroupsEntityGroupParserRuleCall_6_0 = (RuleCall)cGroupsAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		////END datatypes------------------------------------------------------------------------------------
		////BEGIN entities-----------------------------------------------------------------------------------
		//Entity:
		//	annotations+=AnnotationGroup* "entity" name=ID "{" parent=Parent? elements=EntityElements groups+=EntityGroup* "}";
		@Override public ParserRule getRule() { return rule; }

		//annotations+=AnnotationGroup* "entity" name=ID "{" parent=Parent? elements=EntityElements groups+=EntityGroup* "}"
		public Group getGroup() { return cGroup; }

		//annotations+=AnnotationGroup*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//AnnotationGroup
		public RuleCall getAnnotationsAnnotationGroupParserRuleCall_0_0() { return cAnnotationsAnnotationGroupParserRuleCall_0_0; }

		//"entity"
		public Keyword getEntityKeyword_1() { return cEntityKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//parent=Parent?
		public Assignment getParentAssignment_4() { return cParentAssignment_4; }

		//Parent
		public RuleCall getParentParentParserRuleCall_4_0() { return cParentParentParserRuleCall_4_0; }

		//elements=EntityElements
		public Assignment getElementsAssignment_5() { return cElementsAssignment_5; }

		//EntityElements
		public RuleCall getElementsEntityElementsParserRuleCall_5_0() { return cElementsEntityElementsParserRuleCall_5_0; }

		//groups+=EntityGroup*
		public Assignment getGroupsAssignment_6() { return cGroupsAssignment_6; }

		//EntityGroup
		public RuleCall getGroupsEntityGroupParserRuleCall_6_0() { return cGroupsEntityGroupParserRuleCall_6_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class EntityGroupElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EntityGroup");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGroupKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cElementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cElementsEntityElementsParserRuleCall_3_0 = (RuleCall)cElementsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//EntityGroup:
		//	"group" name=ID "{" elements=EntityElements "}";
		@Override public ParserRule getRule() { return rule; }

		//"group" name=ID "{" elements=EntityElements "}"
		public Group getGroup() { return cGroup; }

		//"group"
		public Keyword getGroupKeyword_0() { return cGroupKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//elements=EntityElements
		public Assignment getElementsAssignment_3() { return cElementsAssignment_3; }

		//EntityElements
		public RuleCall getElementsEntityElementsParserRuleCall_3_0() { return cElementsEntityElementsParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class EntityElementsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EntityElements");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEntityElementsAction_0 = (Action)cGroup.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_1 = (UnorderedGroup)cGroup.eContents().get(1);
		private final Assignment cChildsAssignment_1_0 = (Assignment)cUnorderedGroup_1.eContents().get(0);
		private final RuleCall cChildsChildParserRuleCall_1_0_0 = (RuleCall)cChildsAssignment_1_0.eContents().get(0);
		private final Assignment cPropertiesAssignment_1_1 = (Assignment)cUnorderedGroup_1.eContents().get(1);
		private final RuleCall cPropertiesPropertyParserRuleCall_1_1_0 = (RuleCall)cPropertiesAssignment_1_1.eContents().get(0);
		private final Assignment cReferencesAssignment_1_2 = (Assignment)cUnorderedGroup_1.eContents().get(2);
		private final RuleCall cReferencesReferenceParserRuleCall_1_2_0 = (RuleCall)cReferencesAssignment_1_2.eContents().get(0);
		private final Assignment cReferenceListsAssignment_1_3 = (Assignment)cUnorderedGroup_1.eContents().get(3);
		private final RuleCall cReferenceListsReferenceListParserRuleCall_1_3_0 = (RuleCall)cReferenceListsAssignment_1_3.eContents().get(0);
		
		//EntityElements:
		//	{EntityElements} (childs+=Child* & properties+=Property* & references+=Reference* & referenceLists+=ReferenceList*);
		@Override public ParserRule getRule() { return rule; }

		//{EntityElements} (childs+=Child* & properties+=Property* & references+=Reference* & referenceLists+=ReferenceList*)
		public Group getGroup() { return cGroup; }

		//{EntityElements}
		public Action getEntityElementsAction_0() { return cEntityElementsAction_0; }

		//childs+=Child* & properties+=Property* & references+=Reference* & referenceLists+=ReferenceList*
		public UnorderedGroup getUnorderedGroup_1() { return cUnorderedGroup_1; }

		//childs+=Child*
		public Assignment getChildsAssignment_1_0() { return cChildsAssignment_1_0; }

		//Child
		public RuleCall getChildsChildParserRuleCall_1_0_0() { return cChildsChildParserRuleCall_1_0_0; }

		//properties+=Property*
		public Assignment getPropertiesAssignment_1_1() { return cPropertiesAssignment_1_1; }

		//Property
		public RuleCall getPropertiesPropertyParserRuleCall_1_1_0() { return cPropertiesPropertyParserRuleCall_1_1_0; }

		//references+=Reference*
		public Assignment getReferencesAssignment_1_2() { return cReferencesAssignment_1_2; }

		//Reference
		public RuleCall getReferencesReferenceParserRuleCall_1_2_0() { return cReferencesReferenceParserRuleCall_1_2_0; }

		//referenceLists+=ReferenceList*
		public Assignment getReferenceListsAssignment_1_3() { return cReferenceListsAssignment_1_3; }

		//ReferenceList
		public RuleCall getReferenceListsReferenceListParserRuleCall_1_3_0() { return cReferenceListsReferenceListParserRuleCall_1_3_0; }
	}

	public class ContainerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Container");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cParentParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cChildParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		////END entities-------------------------------------------------------------------------------------
		////BEGIN fields and containers----------------------------------------------------------------------
		//Container:
		//	Parent | Child;
		@Override public ParserRule getRule() { return rule; }

		//Parent | Child
		public Alternatives getAlternatives() { return cAlternatives; }

		//Parent
		public RuleCall getParentParserRuleCall_0() { return cParentParserRuleCall_0; }

		//Child
		public RuleCall getChildParserRuleCall_1() { return cChildParserRuleCall_1; }
	}

	public class FieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Field");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPropertyParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cReferenceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cReferenceListParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Field:
		//	Property | Reference | ReferenceList;
		@Override public ParserRule getRule() { return rule; }

		//Property | Reference | ReferenceList
		public Alternatives getAlternatives() { return cAlternatives; }

		//Property
		public RuleCall getPropertyParserRuleCall_0() { return cPropertyParserRuleCall_0; }

		//Reference
		public RuleCall getReferenceParserRuleCall_1() { return cReferenceParserRuleCall_1; }

		//ReferenceList
		public RuleCall getReferenceListParserRuleCall_2() { return cReferenceListParserRuleCall_2; }
	}

	public class ParentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Parent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cParentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTypeEntityCrossReference_1_0 = (CrossReference)cTypeAssignment_1.eContents().get(0);
		private final RuleCall cTypeEntityQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cTypeEntityCrossReference_1_0.eContents().get(1);
		private final Assignment cAnnotationsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAnnotationsAnnotationGroupParserRuleCall_2_0 = (RuleCall)cAnnotationsAssignment_2.eContents().get(0);
		
		//Parent:
		//	":parent->" type=[Entity|QualifiedName] annotations+=AnnotationGroup*;
		@Override public ParserRule getRule() { return rule; }

		//":parent->" type=[Entity|QualifiedName] annotations+=AnnotationGroup*
		public Group getGroup() { return cGroup; }

		//":parent->"
		public Keyword getParentKeyword_0() { return cParentKeyword_0; }

		//type=[Entity|QualifiedName]
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//[Entity|QualifiedName]
		public CrossReference getTypeEntityCrossReference_1_0() { return cTypeEntityCrossReference_1_0; }

		//QualifiedName
		public RuleCall getTypeEntityQualifiedNameParserRuleCall_1_0_1() { return cTypeEntityQualifiedNameParserRuleCall_1_0_1; }

		//annotations+=AnnotationGroup*
		public Assignment getAnnotationsAssignment_2() { return cAnnotationsAssignment_2; }

		//AnnotationGroup
		public RuleCall getAnnotationsAnnotationGroupParserRuleCall_2_0() { return cAnnotationsAnnotationGroupParserRuleCall_2_0; }
	}

	public class ChildElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Child");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cChildsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTypeEntityCrossReference_1_0 = (CrossReference)cTypeAssignment_1.eContents().get(0);
		private final RuleCall cTypeEntityQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cTypeEntityCrossReference_1_0.eContents().get(1);
		private final Assignment cAnnotationsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAnnotationsAnnotationGroupParserRuleCall_2_0 = (RuleCall)cAnnotationsAssignment_2.eContents().get(0);
		
		//Child:
		//	":childs-<" type=[Entity|QualifiedName] annotations+=AnnotationGroup*;
		@Override public ParserRule getRule() { return rule; }

		//":childs-<" type=[Entity|QualifiedName] annotations+=AnnotationGroup*
		public Group getGroup() { return cGroup; }

		//":childs-<"
		public Keyword getChildsKeyword_0() { return cChildsKeyword_0; }

		//type=[Entity|QualifiedName]
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//[Entity|QualifiedName]
		public CrossReference getTypeEntityCrossReference_1_0() { return cTypeEntityCrossReference_1_0; }

		//QualifiedName
		public RuleCall getTypeEntityQualifiedNameParserRuleCall_1_0_1() { return cTypeEntityQualifiedNameParserRuleCall_1_0_1; }

		//annotations+=AnnotationGroup*
		public Assignment getAnnotationsAssignment_2() { return cAnnotationsAssignment_2; }

		//AnnotationGroup
		public RuleCall getAnnotationsAnnotationGroupParserRuleCall_2_0() { return cAnnotationsAnnotationGroupParserRuleCall_2_0; }
	}

	public class PropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Property");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cOptionalAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cOptionalQuestionMarkKeyword_1_0 = (Keyword)cOptionalAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cTypeTypeCrossReference_3_0 = (CrossReference)cTypeAssignment_3.eContents().get(0);
		private final RuleCall cTypeTypeQualifiedNameParserRuleCall_3_0_1 = (RuleCall)cTypeTypeCrossReference_3_0.eContents().get(1);
		private final Assignment cAnnotationsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cAnnotationsAnnotationGroupParserRuleCall_4_0 = (RuleCall)cAnnotationsAssignment_4.eContents().get(0);
		
		//Property:
		//	name=ID optional?="?"? ":" type=[Type|QualifiedName] annotations+=AnnotationGroup*;
		@Override public ParserRule getRule() { return rule; }

		//name=ID optional?="?"? ":" type=[Type|QualifiedName] annotations+=AnnotationGroup*
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//optional?="?"?
		public Assignment getOptionalAssignment_1() { return cOptionalAssignment_1; }

		//"?"
		public Keyword getOptionalQuestionMarkKeyword_1_0() { return cOptionalQuestionMarkKeyword_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//type=[Type|QualifiedName]
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//[Type|QualifiedName]
		public CrossReference getTypeTypeCrossReference_3_0() { return cTypeTypeCrossReference_3_0; }

		//QualifiedName
		public RuleCall getTypeTypeQualifiedNameParserRuleCall_3_0_1() { return cTypeTypeQualifiedNameParserRuleCall_3_0_1; }

		//annotations+=AnnotationGroup*
		public Assignment getAnnotationsAssignment_4() { return cAnnotationsAssignment_4; }

		//AnnotationGroup
		public RuleCall getAnnotationsAnnotationGroupParserRuleCall_4_0() { return cAnnotationsAnnotationGroupParserRuleCall_4_0; }
	}

	public class ReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Reference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cOptionalAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cOptionalQuestionMarkKeyword_1_0 = (Keyword)cOptionalAssignment_1.eContents().get(0);
		private final Keyword cHyphenMinusHyphenMinusGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cEntityAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cEntityEntityCrossReference_3_0 = (CrossReference)cEntityAssignment_3.eContents().get(0);
		private final RuleCall cEntityEntityQualifiedNameParserRuleCall_3_0_1 = (RuleCall)cEntityEntityCrossReference_3_0.eContents().get(1);
		private final Assignment cAnnotationsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cAnnotationsAnnotationGroupParserRuleCall_4_0 = (RuleCall)cAnnotationsAssignment_4.eContents().get(0);
		
		//Reference:
		//	name=ID optional?="?"? "-->" entity=[Entity|QualifiedName] annotations+=AnnotationGroup*;
		@Override public ParserRule getRule() { return rule; }

		//name=ID optional?="?"? "-->" entity=[Entity|QualifiedName] annotations+=AnnotationGroup*
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//optional?="?"?
		public Assignment getOptionalAssignment_1() { return cOptionalAssignment_1; }

		//"?"
		public Keyword getOptionalQuestionMarkKeyword_1_0() { return cOptionalQuestionMarkKeyword_1_0; }

		//"-->"
		public Keyword getHyphenMinusHyphenMinusGreaterThanSignKeyword_2() { return cHyphenMinusHyphenMinusGreaterThanSignKeyword_2; }

		//entity=[Entity|QualifiedName]
		public Assignment getEntityAssignment_3() { return cEntityAssignment_3; }

		//[Entity|QualifiedName]
		public CrossReference getEntityEntityCrossReference_3_0() { return cEntityEntityCrossReference_3_0; }

		//QualifiedName
		public RuleCall getEntityEntityQualifiedNameParserRuleCall_3_0_1() { return cEntityEntityQualifiedNameParserRuleCall_3_0_1; }

		//annotations+=AnnotationGroup*
		public Assignment getAnnotationsAssignment_4() { return cAnnotationsAssignment_4; }

		//AnnotationGroup
		public RuleCall getAnnotationsAnnotationGroupParserRuleCall_4_0() { return cAnnotationsAnnotationGroupParserRuleCall_4_0; }
	}

	public class ReferenceListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ReferenceList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cReferenceAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final CrossReference cReferenceReferenceCrossReference_1_0_1_0 = (CrossReference)cReferenceAssignment_1_0_1.eContents().get(0);
		private final RuleCall cReferenceReferenceIDTerminalRuleCall_1_0_1_0_1 = (RuleCall)cReferenceReferenceCrossReference_1_0_1_0.eContents().get(1);
		private final Keyword cHyphenMinusLessThanSignKeyword_1_0_2 = (Keyword)cGroup_1_0.eContents().get(2);
		private final Keyword cHyphenMinusHyphenMinusLessThanSignKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Assignment cEntityAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cEntityEntityCrossReference_2_0 = (CrossReference)cEntityAssignment_2.eContents().get(0);
		private final RuleCall cEntityEntityQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cEntityEntityCrossReference_2_0.eContents().get(1);
		private final Assignment cAnnotationsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAnnotationsAnnotationGroupParserRuleCall_3_0 = (RuleCall)cAnnotationsAssignment_3.eContents().get(0);
		
		//ReferenceList:
		//	name=ID ("-" reference=[Reference] "-<" | "--<") entity=[Entity|QualifiedName] annotations+=AnnotationGroup*;
		@Override public ParserRule getRule() { return rule; }

		//name=ID ("-" reference=[Reference] "-<" | "--<") entity=[Entity|QualifiedName] annotations+=AnnotationGroup*
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"-" reference=[Reference] "-<" | "--<"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"-" reference=[Reference] "-<"
		public Group getGroup_1_0() { return cGroup_1_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_1_0_0() { return cHyphenMinusKeyword_1_0_0; }

		//reference=[Reference]
		public Assignment getReferenceAssignment_1_0_1() { return cReferenceAssignment_1_0_1; }

		//[Reference]
		public CrossReference getReferenceReferenceCrossReference_1_0_1_0() { return cReferenceReferenceCrossReference_1_0_1_0; }

		//ID
		public RuleCall getReferenceReferenceIDTerminalRuleCall_1_0_1_0_1() { return cReferenceReferenceIDTerminalRuleCall_1_0_1_0_1; }

		//"-<"
		public Keyword getHyphenMinusLessThanSignKeyword_1_0_2() { return cHyphenMinusLessThanSignKeyword_1_0_2; }

		//"--<"
		public Keyword getHyphenMinusHyphenMinusLessThanSignKeyword_1_1() { return cHyphenMinusHyphenMinusLessThanSignKeyword_1_1; }

		//entity=[Entity|QualifiedName]
		public Assignment getEntityAssignment_2() { return cEntityAssignment_2; }

		//[Entity|QualifiedName]
		public CrossReference getEntityEntityCrossReference_2_0() { return cEntityEntityCrossReference_2_0; }

		//QualifiedName
		public RuleCall getEntityEntityQualifiedNameParserRuleCall_2_0_1() { return cEntityEntityQualifiedNameParserRuleCall_2_0_1; }

		//annotations+=AnnotationGroup*
		public Assignment getAnnotationsAssignment_3() { return cAnnotationsAssignment_3; }

		//AnnotationGroup
		public RuleCall getAnnotationsAnnotationGroupParserRuleCall_3_0() { return cAnnotationsAnnotationGroupParserRuleCall_3_0; }
	}

	public class AnnotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Annotation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypesAnnoTypesParserRuleCall_1_0 = (RuleCall)cTypesAssignment_1.eContents().get(0);
		private final Assignment cInstancesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInstancesAnnotationInstanceParserRuleCall_2_0 = (RuleCall)cInstancesAssignment_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cAnnotationKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cNameAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cNameIDTerminalRuleCall_5_0 = (RuleCall)cNameAssignment_5.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cMandatoriesAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cMandatoriesAnnotationMandatoryPropertyParserRuleCall_7_0 = (RuleCall)cMandatoriesAssignment_7.eContents().get(0);
		private final Assignment cOptionalsAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cOptionalsAnnotationOptionalPropertyParserRuleCall_8_0 = (RuleCall)cOptionalsAssignment_8.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		////END fields and containers------------------------------------------------------------------------
		////BEGIN annotations--------------------------------------------------------------------------------
		//Annotation:
		//	"[" types+=AnnoTypes+ instances+=AnnotationInstance* "]" "annotation" name=ID "{"
		//	mandatories+=AnnotationMandatoryProperty* optionals+=AnnotationOptionalProperty* "}";
		@Override public ParserRule getRule() { return rule; }

		//"[" types+=AnnoTypes+ instances+=AnnotationInstance* "]" "annotation" name=ID "{"
		//mandatories+=AnnotationMandatoryProperty* optionals+=AnnotationOptionalProperty* "}"
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//types+=AnnoTypes+
		public Assignment getTypesAssignment_1() { return cTypesAssignment_1; }

		//AnnoTypes
		public RuleCall getTypesAnnoTypesParserRuleCall_1_0() { return cTypesAnnoTypesParserRuleCall_1_0; }

		//instances+=AnnotationInstance*
		public Assignment getInstancesAssignment_2() { return cInstancesAssignment_2; }

		//AnnotationInstance
		public RuleCall getInstancesAnnotationInstanceParserRuleCall_2_0() { return cInstancesAnnotationInstanceParserRuleCall_2_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }

		//"annotation"
		public Keyword getAnnotationKeyword_4() { return cAnnotationKeyword_4; }

		//name=ID
		public Assignment getNameAssignment_5() { return cNameAssignment_5; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_5_0() { return cNameIDTerminalRuleCall_5_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }

		//mandatories+=AnnotationMandatoryProperty*
		public Assignment getMandatoriesAssignment_7() { return cMandatoriesAssignment_7; }

		//AnnotationMandatoryProperty
		public RuleCall getMandatoriesAnnotationMandatoryPropertyParserRuleCall_7_0() { return cMandatoriesAnnotationMandatoryPropertyParserRuleCall_7_0; }

		//optionals+=AnnotationOptionalProperty*
		public Assignment getOptionalsAssignment_8() { return cOptionalsAssignment_8; }

		//AnnotationOptionalProperty
		public RuleCall getOptionalsAnnotationOptionalPropertyParserRuleCall_8_0() { return cOptionalsAnnotationOptionalPropertyParserRuleCall_8_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}

	public class AnnotationMandatoryPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AnnotationMandatoryProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cGroupAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cGroupGroupTypeParserRuleCall_2_0_0 = (RuleCall)cGroupAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Assignment cTypeAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final RuleCall cTypeValueTypeEnumRuleCall_2_1_0_0 = (RuleCall)cTypeAssignment_2_1_0.eContents().get(0);
		private final Assignment cMultiAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final Keyword cMultiAsteriskKeyword_2_1_1_0 = (Keyword)cMultiAssignment_2_1_1.eContents().get(0);
		
		//AnnotationMandatoryProperty returns AnnotationProperty:
		//	name=ID ":" (group=GroupType | type=ValueType multi?="*"?);
		@Override public ParserRule getRule() { return rule; }

		//name=ID ":" (group=GroupType | type=ValueType multi?="*"?)
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//group=GroupType | type=ValueType multi?="*"?
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//group=GroupType
		public Assignment getGroupAssignment_2_0() { return cGroupAssignment_2_0; }

		//GroupType
		public RuleCall getGroupGroupTypeParserRuleCall_2_0_0() { return cGroupGroupTypeParserRuleCall_2_0_0; }

		//type=ValueType multi?="*"?
		public Group getGroup_2_1() { return cGroup_2_1; }

		//type=ValueType
		public Assignment getTypeAssignment_2_1_0() { return cTypeAssignment_2_1_0; }

		//ValueType
		public RuleCall getTypeValueTypeEnumRuleCall_2_1_0_0() { return cTypeValueTypeEnumRuleCall_2_1_0_0; }

		//multi?="*"?
		public Assignment getMultiAssignment_2_1_1() { return cMultiAssignment_2_1_1; }

		//"*"
		public Keyword getMultiAsteriskKeyword_2_1_1_0() { return cMultiAsteriskKeyword_2_1_1_0; }
	}

	public class AnnotationOptionalPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AnnotationOptionalProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cQuestionMarkKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cGroupAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cGroupGroupTypeParserRuleCall_3_0_0 = (RuleCall)cGroupAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Assignment cTypeAssignment_3_1_0 = (Assignment)cGroup_3_1.eContents().get(0);
		private final RuleCall cTypeValueTypeEnumRuleCall_3_1_0_0 = (RuleCall)cTypeAssignment_3_1_0.eContents().get(0);
		private final Assignment cMultiAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final Keyword cMultiAsteriskKeyword_3_1_1_0 = (Keyword)cMultiAssignment_3_1_1.eContents().get(0);
		
		//AnnotationOptionalProperty returns AnnotationProperty:
		//	name=ID "?" ":" (group=GroupType | type=ValueType multi?="*"?);
		@Override public ParserRule getRule() { return rule; }

		//name=ID "?" ":" (group=GroupType | type=ValueType multi?="*"?)
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"?"
		public Keyword getQuestionMarkKeyword_1() { return cQuestionMarkKeyword_1; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//group=GroupType | type=ValueType multi?="*"?
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//group=GroupType
		public Assignment getGroupAssignment_3_0() { return cGroupAssignment_3_0; }

		//GroupType
		public RuleCall getGroupGroupTypeParserRuleCall_3_0_0() { return cGroupGroupTypeParserRuleCall_3_0_0; }

		//type=ValueType multi?="*"?
		public Group getGroup_3_1() { return cGroup_3_1; }

		//type=ValueType
		public Assignment getTypeAssignment_3_1_0() { return cTypeAssignment_3_1_0; }

		//ValueType
		public RuleCall getTypeValueTypeEnumRuleCall_3_1_0_0() { return cTypeValueTypeEnumRuleCall_3_1_0_0; }

		//multi?="*"?
		public Assignment getMultiAssignment_3_1_1() { return cMultiAssignment_3_1_1; }

		//"*"
		public Keyword getMultiAsteriskKeyword_3_1_1_0() { return cMultiAsteriskKeyword_3_1_1_0; }
	}

	public class AnnotationGroupElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AnnotationGroup");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cInstancesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cInstancesAnnotationInstanceParserRuleCall_1_0 = (RuleCall)cInstancesAssignment_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//AnnotationGroup:
		//	"[" instances+=AnnotationInstance+ "]";
		@Override public ParserRule getRule() { return rule; }

		//"[" instances+=AnnotationInstance+ "]"
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//instances+=AnnotationInstance+
		public Assignment getInstancesAssignment_1() { return cInstancesAssignment_1; }

		//AnnotationInstance
		public RuleCall getInstancesAnnotationInstanceParserRuleCall_1_0() { return cInstancesAnnotationInstanceParserRuleCall_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
	}

	public class AnnotationInstanceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AnnotationInstance");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cAnnotationAnnotationCrossReference_0_0 = (CrossReference)cAnnotationAssignment_0.eContents().get(0);
		private final RuleCall cAnnotationAnnotationQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cAnnotationAnnotationCrossReference_0_0.eContents().get(1);
		private final Assignment cValuesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValuesAnnotationValueParserRuleCall_1_0 = (RuleCall)cValuesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cHIDDENKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cPropertiesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cPropertiesAnnotationHiddenPropertyParserRuleCall_2_1_0 = (RuleCall)cPropertiesAssignment_2_1.eContents().get(0);
		private final Keyword cHIDDENKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//AnnotationInstance:
		//	annotation=[Annotation|QualifiedName] values+=AnnotationValue* ("-HIDDEN-" properties+=AnnotationHiddenProperty+
		//	"-HIDDEN-")?;
		@Override public ParserRule getRule() { return rule; }

		//annotation=[Annotation|QualifiedName] values+=AnnotationValue* ("-HIDDEN-" properties+=AnnotationHiddenProperty+
		//"-HIDDEN-")?
		public Group getGroup() { return cGroup; }

		//annotation=[Annotation|QualifiedName]
		public Assignment getAnnotationAssignment_0() { return cAnnotationAssignment_0; }

		//[Annotation|QualifiedName]
		public CrossReference getAnnotationAnnotationCrossReference_0_0() { return cAnnotationAnnotationCrossReference_0_0; }

		//QualifiedName
		public RuleCall getAnnotationAnnotationQualifiedNameParserRuleCall_0_0_1() { return cAnnotationAnnotationQualifiedNameParserRuleCall_0_0_1; }

		//values+=AnnotationValue*
		public Assignment getValuesAssignment_1() { return cValuesAssignment_1; }

		//AnnotationValue
		public RuleCall getValuesAnnotationValueParserRuleCall_1_0() { return cValuesAnnotationValueParserRuleCall_1_0; }

		//("-HIDDEN-" properties+=AnnotationHiddenProperty+ "-HIDDEN-")?
		public Group getGroup_2() { return cGroup_2; }

		//"-HIDDEN-"
		public Keyword getHIDDENKeyword_2_0() { return cHIDDENKeyword_2_0; }

		//properties+=AnnotationHiddenProperty+
		public Assignment getPropertiesAssignment_2_1() { return cPropertiesAssignment_2_1; }

		//AnnotationHiddenProperty
		public RuleCall getPropertiesAnnotationHiddenPropertyParserRuleCall_2_1_0() { return cPropertiesAnnotationHiddenPropertyParserRuleCall_2_1_0; }

		//"-HIDDEN-"
		public Keyword getHIDDENKeyword_2_2() { return cHIDDENKeyword_2_2; }
	}

	public class AnnotationHiddenPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AnnotationHiddenProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPropertyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cPropertyAnnotationPropertyCrossReference_0_0 = (CrossReference)cPropertyAssignment_0.eContents().get(0);
		private final RuleCall cPropertyAnnotationPropertyIDTerminalRuleCall_0_0_1 = (RuleCall)cPropertyAnnotationPropertyCrossReference_0_0.eContents().get(1);
		private final Assignment cValuesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cValuesAnnotationValueCrossReference_1_0 = (CrossReference)cValuesAssignment_1.eContents().get(0);
		private final RuleCall cValuesAnnotationValueIDTerminalRuleCall_1_0_1 = (RuleCall)cValuesAnnotationValueCrossReference_1_0.eContents().get(1);
		
		//AnnotationHiddenProperty:
		//	property=[AnnotationProperty] values+=[AnnotationValue]*;
		@Override public ParserRule getRule() { return rule; }

		//property=[AnnotationProperty] values+=[AnnotationValue]*
		public Group getGroup() { return cGroup; }

		//property=[AnnotationProperty]
		public Assignment getPropertyAssignment_0() { return cPropertyAssignment_0; }

		//[AnnotationProperty]
		public CrossReference getPropertyAnnotationPropertyCrossReference_0_0() { return cPropertyAnnotationPropertyCrossReference_0_0; }

		//ID
		public RuleCall getPropertyAnnotationPropertyIDTerminalRuleCall_0_0_1() { return cPropertyAnnotationPropertyIDTerminalRuleCall_0_0_1; }

		//values+=[AnnotationValue]*
		public Assignment getValuesAssignment_1() { return cValuesAssignment_1; }

		//[AnnotationValue]
		public CrossReference getValuesAnnotationValueCrossReference_1_0() { return cValuesAnnotationValueCrossReference_1_0; }

		//ID
		public RuleCall getValuesAnnotationValueIDTerminalRuleCall_1_0_1() { return cValuesAnnotationValueIDTerminalRuleCall_1_0_1; }
	}

	public class AnnotationValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AnnotationValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAnnotationGroupParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AnnotationValue:
		//	Value | AnnotationGroup;
		@Override public ParserRule getRule() { return rule; }

		//Value | AnnotationGroup
		public Alternatives getAlternatives() { return cAlternatives; }

		//Value
		public RuleCall getValueParserRuleCall_0() { return cValueParserRuleCall_0; }

		//AnnotationGroup
		public RuleCall getAnnotationGroupParserRuleCall_1() { return cAnnotationGroupParserRuleCall_1; }
	}

	public class AnnotatedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Annotated");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cElementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAnnotationInstanceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFieldParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cContainerParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Annotated:
		//	Element | AnnotationInstance | Field | Container;
		@Override public ParserRule getRule() { return rule; }

		//Element | AnnotationInstance | Field | Container
		public Alternatives getAlternatives() { return cAlternatives; }

		//Element
		public RuleCall getElementParserRuleCall_0() { return cElementParserRuleCall_0; }

		//AnnotationInstance
		public RuleCall getAnnotationInstanceParserRuleCall_1() { return cAnnotationInstanceParserRuleCall_1; }

		//Field
		public RuleCall getFieldParserRuleCall_2() { return cFieldParserRuleCall_2; }

		//Container
		public RuleCall getContainerParserRuleCall_3() { return cContainerParserRuleCall_3; }
	}

	public class GroupTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GroupType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cTypeGroupKeyword_0_0 = (Keyword)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//GroupType:
		//	type="#group" name=STRING;
		@Override public ParserRule getRule() { return rule; }

		//type="#group" name=STRING
		public Group getGroup() { return cGroup; }

		//type="#group"
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//"#group"
		public Keyword getTypeGroupKeyword_0_0() { return cTypeGroupKeyword_0_0; }

		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }
	}

	public class PackageTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PackageType");
		private final Assignment cTypeAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cTypePackageKeyword_0 = (Keyword)cTypeAssignment.eContents().get(0);
		
		//PackageType:
		//	type="#package";
		@Override public ParserRule getRule() { return rule; }

		//type="#package"
		public Assignment getTypeAssignment() { return cTypeAssignment; }

		//"#package"
		public Keyword getTypePackageKeyword_0() { return cTypePackageKeyword_0; }
	}

	public class DataTypeTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DataTypeType");
		private final Assignment cTypeAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cTypeDatatypeKeyword_0 = (Keyword)cTypeAssignment.eContents().get(0);
		
		//DataTypeType:
		//	type="#datatype";
		@Override public ParserRule getRule() { return rule; }

		//type="#datatype"
		public Assignment getTypeAssignment() { return cTypeAssignment; }

		//"#datatype"
		public Keyword getTypeDatatypeKeyword_0() { return cTypeDatatypeKeyword_0; }
	}

	public class AnnotationTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AnnotationType");
		private final Assignment cTypeAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cTypeAnnotationKeyword_0 = (Keyword)cTypeAssignment.eContents().get(0);
		
		//AnnotationType:
		//	type="#annotation";
		@Override public ParserRule getRule() { return rule; }

		//type="#annotation"
		public Assignment getTypeAssignment() { return cTypeAssignment; }

		//"#annotation"
		public Keyword getTypeAnnotationKeyword_0() { return cTypeAnnotationKeyword_0; }
	}

	public class EntityTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EntityType");
		private final Assignment cTypeAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cTypeEntityKeyword_0 = (Keyword)cTypeAssignment.eContents().get(0);
		
		//EntityType:
		//	type="#entity";
		@Override public ParserRule getRule() { return rule; }

		//type="#entity"
		public Assignment getTypeAssignment() { return cTypeAssignment; }

		//"#entity"
		public Keyword getTypeEntityKeyword_0() { return cTypeEntityKeyword_0; }
	}

	public class PropertyTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PropertyType");
		private final Assignment cTypeAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cTypePropertyKeyword_0 = (Keyword)cTypeAssignment.eContents().get(0);
		
		//PropertyType:
		//	type="#property";
		@Override public ParserRule getRule() { return rule; }

		//type="#property"
		public Assignment getTypeAssignment() { return cTypeAssignment; }

		//"#property"
		public Keyword getTypePropertyKeyword_0() { return cTypePropertyKeyword_0; }
	}

	public class ReferenceTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ReferenceType");
		private final Assignment cTypeAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cTypeReferenceKeyword_0 = (Keyword)cTypeAssignment.eContents().get(0);
		
		//ReferenceType:
		//	type="#reference";
		@Override public ParserRule getRule() { return rule; }

		//type="#reference"
		public Assignment getTypeAssignment() { return cTypeAssignment; }

		//"#reference"
		public Keyword getTypeReferenceKeyword_0() { return cTypeReferenceKeyword_0; }
	}

	public class ReferenceListTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ReferenceListType");
		private final Assignment cTypeAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cTypeReferenceListKeyword_0 = (Keyword)cTypeAssignment.eContents().get(0);
		
		//ReferenceListType:
		//	type="#reference-list";
		@Override public ParserRule getRule() { return rule; }

		//type="#reference-list"
		public Assignment getTypeAssignment() { return cTypeAssignment; }

		//"#reference-list"
		public Keyword getTypeReferenceListKeyword_0() { return cTypeReferenceListKeyword_0; }
	}

	public class ParentTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParentType");
		private final Assignment cTypeAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cTypeParentKeyword_0 = (Keyword)cTypeAssignment.eContents().get(0);
		
		//ParentType:
		//	type="#parent";
		@Override public ParserRule getRule() { return rule; }

		//type="#parent"
		public Assignment getTypeAssignment() { return cTypeAssignment; }

		//"#parent"
		public Keyword getTypeParentKeyword_0() { return cTypeParentKeyword_0; }
	}

	public class ChildTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ChildType");
		private final Assignment cTypeAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cTypeChildKeyword_0 = (Keyword)cTypeAssignment.eContents().get(0);
		
		//ChildType:
		//	type="#child";
		@Override public ParserRule getRule() { return rule; }

		//type="#child"
		public Assignment getTypeAssignment() { return cTypeAssignment; }

		//"#child"
		public Keyword getTypeChildKeyword_0() { return cTypeChildKeyword_0; }
	}

	public class AnnoTypesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AnnoTypes");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cGroupTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPackageTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDataTypeTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cAnnotationTypeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cEntityTypeParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cPropertyTypeParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cReferenceTypeParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cReferenceListTypeParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cParentTypeParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cChildTypeParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		
		//AnnoTypes:
		//	GroupType | PackageType | DataTypeType | AnnotationType | EntityType | PropertyType | ReferenceType |
		//	ReferenceListType | ParentType | ChildType;
		@Override public ParserRule getRule() { return rule; }

		//GroupType | PackageType | DataTypeType | AnnotationType | EntityType | PropertyType | ReferenceType | ReferenceListType
		//| ParentType | ChildType
		public Alternatives getAlternatives() { return cAlternatives; }

		//GroupType
		public RuleCall getGroupTypeParserRuleCall_0() { return cGroupTypeParserRuleCall_0; }

		//PackageType
		public RuleCall getPackageTypeParserRuleCall_1() { return cPackageTypeParserRuleCall_1; }

		//DataTypeType
		public RuleCall getDataTypeTypeParserRuleCall_2() { return cDataTypeTypeParserRuleCall_2; }

		//AnnotationType
		public RuleCall getAnnotationTypeParserRuleCall_3() { return cAnnotationTypeParserRuleCall_3; }

		//EntityType
		public RuleCall getEntityTypeParserRuleCall_4() { return cEntityTypeParserRuleCall_4; }

		//PropertyType
		public RuleCall getPropertyTypeParserRuleCall_5() { return cPropertyTypeParserRuleCall_5; }

		//ReferenceType
		public RuleCall getReferenceTypeParserRuleCall_6() { return cReferenceTypeParserRuleCall_6; }

		//ReferenceListType
		public RuleCall getReferenceListTypeParserRuleCall_7() { return cReferenceListTypeParserRuleCall_7; }

		//ParentType
		public RuleCall getParentTypeParserRuleCall_8() { return cParentTypeParserRuleCall_8; }

		//ChildType
		public RuleCall getChildTypeParserRuleCall_9() { return cChildTypeParserRuleCall_9; }
	}

	public class StringValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//StringValue:
		//	value=STRING;
		@Override public ParserRule getRule() { return rule; }

		//value=STRING
		public Assignment getValueAssignment() { return cValueAssignment; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0() { return cValueSTRINGTerminalRuleCall_0; }
	}

	public class IntegerValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntegerValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueIntegerParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//IntegerValue:
		//	value=Integer;
		@Override public ParserRule getRule() { return rule; }

		//value=Integer
		public Assignment getValueAssignment() { return cValueAssignment; }

		//Integer
		public RuleCall getValueIntegerParserRuleCall_0() { return cValueIntegerParserRuleCall_0; }
	}

	public class DoubleValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DoubleValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueDoubleParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//DoubleValue:
		//	value=Double;
		@Override public ParserRule getRule() { return rule; }

		//value=Double
		public Assignment getValueAssignment() { return cValueAssignment; }

		//Double
		public RuleCall getValueDoubleParserRuleCall_0() { return cValueDoubleParserRuleCall_0; }
	}

	public class RangeValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RangeValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cFromAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final RuleCall cFromIntegerParserRuleCall_0_0_0 = (RuleCall)cFromAssignment_0_0.eContents().get(0);
		private final Assignment cFromInfAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final Keyword cFromInfAsteriskKeyword_0_1_0 = (Keyword)cFromInfAssignment_0_1.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cToAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cToIntegerParserRuleCall_2_0_0 = (RuleCall)cToAssignment_2_0.eContents().get(0);
		private final Assignment cToInfAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final Keyword cToInfAsteriskKeyword_2_1_0 = (Keyword)cToInfAssignment_2_1.eContents().get(0);
		
		//RangeValue hidden():
		//	(from=Integer | fromInf?="*") ".." (to=Integer | toInf?="*");
		@Override public ParserRule getRule() { return rule; }

		//(from=Integer | fromInf?="*") ".." (to=Integer | toInf?="*")
		public Group getGroup() { return cGroup; }

		//from=Integer | fromInf?="*"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//from=Integer
		public Assignment getFromAssignment_0_0() { return cFromAssignment_0_0; }

		//Integer
		public RuleCall getFromIntegerParserRuleCall_0_0_0() { return cFromIntegerParserRuleCall_0_0_0; }

		//fromInf?="*"
		public Assignment getFromInfAssignment_0_1() { return cFromInfAssignment_0_1; }

		//"*"
		public Keyword getFromInfAsteriskKeyword_0_1_0() { return cFromInfAsteriskKeyword_0_1_0; }

		//".."
		public Keyword getFullStopFullStopKeyword_1() { return cFullStopFullStopKeyword_1; }

		//to=Integer | toInf?="*"
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//to=Integer
		public Assignment getToAssignment_2_0() { return cToAssignment_2_0; }

		//Integer
		public RuleCall getToIntegerParserRuleCall_2_0_0() { return cToIntegerParserRuleCall_2_0_0; }

		//toInf?="*"
		public Assignment getToInfAssignment_2_1() { return cToInfAssignment_2_1; }

		//"*"
		public Keyword getToInfAsteriskKeyword_2_1_0() { return cToInfAsteriskKeyword_2_1_0; }
	}

	public class FormatRangeValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FormatRangeValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFromAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFromSTRINGTerminalRuleCall_0_0 = (RuleCall)cFromAssignment_0.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cToAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cToSTRINGTerminalRuleCall_2_0 = (RuleCall)cToAssignment_2.eContents().get(0);
		
		//FormatRangeValue hidden():
		//	from=STRING ".." to=STRING;
		@Override public ParserRule getRule() { return rule; }

		//from=STRING ".." to=STRING
		public Group getGroup() { return cGroup; }

		//from=STRING
		public Assignment getFromAssignment_0() { return cFromAssignment_0; }

		//STRING
		public RuleCall getFromSTRINGTerminalRuleCall_0_0() { return cFromSTRINGTerminalRuleCall_0_0; }

		//".."
		public Keyword getFullStopFullStopKeyword_1() { return cFullStopFullStopKeyword_1; }

		//to=STRING
		public Assignment getToAssignment_2() { return cToAssignment_2; }

		//STRING
		public RuleCall getToSTRINGTerminalRuleCall_2_0() { return cToSTRINGTerminalRuleCall_2_0; }
	}

	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStringValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIntegerValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDoubleValueParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cRangeValueParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cFormatRangeValueParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Value:
		//	StringValue | IntegerValue | DoubleValue | RangeValue | FormatRangeValue;
		@Override public ParserRule getRule() { return rule; }

		//=> StringValue | IntegerValue | DoubleValue | RangeValue | FormatRangeValue
		public Alternatives getAlternatives() { return cAlternatives; }

		//=> StringValue
		public RuleCall getStringValueParserRuleCall_0() { return cStringValueParserRuleCall_0; }

		//IntegerValue
		public RuleCall getIntegerValueParserRuleCall_1() { return cIntegerValueParserRuleCall_1; }

		//DoubleValue
		public RuleCall getDoubleValueParserRuleCall_2() { return cDoubleValueParserRuleCall_2; }

		//RangeValue
		public RuleCall getRangeValueParserRuleCall_3() { return cRangeValueParserRuleCall_3; }

		//FormatRangeValue
		public RuleCall getFormatRangeValueParserRuleCall_4() { return cFormatRangeValueParserRuleCall_4; }
	}

	public class IntegerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Integer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		////END types and values-----------------------------------------------------------------------------
		//Integer returns ecore::EInt:
		//	"-"? INT;
		@Override public ParserRule getRule() { return rule; }

		//"-"? INT
		public Group getGroup() { return cGroup; }

		//"-"?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}

	public class DoubleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Double");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIntegerParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//Double returns ecore::EDouble:
		//	Integer "." INT;
		@Override public ParserRule getRule() { return rule; }

		//Integer "." INT
		public Group getGroup() { return cGroup; }

		//Integer
		public RuleCall getIntegerParserRuleCall_0() { return cIntegerParserRuleCall_0; }

		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
	}

	public class QualifiedNameWithWildcardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedNameWithWildcard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//QualifiedNameWithWildcard:
		//	QualifiedName ".*"?;
		@Override public ParserRule getRule() { return rule; }

		//QualifiedName ".*"?
		public Group getGroup() { return cGroup; }

		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_0() { return cQualifiedNameParserRuleCall_0; }

		//".*"?
		public Keyword getFullStopAsteriskKeyword_1() { return cFullStopAsteriskKeyword_1; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ("." ID)*;
		@Override public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	
	
	public class ValueTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ValueType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSTRINGEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSTRINGStringKeyword_0_0 = (Keyword)cSTRINGEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cINTEGEREnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cINTEGERIntegerKeyword_1_0 = (Keyword)cINTEGEREnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cDOUBLEEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cDOUBLEDoubleKeyword_2_0 = (Keyword)cDOUBLEEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cINT_RANGEEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cINT_RANGEIntRangeKeyword_3_0 = (Keyword)cINT_RANGEEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cFORMAT_RANGEEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cFORMAT_RANGEFormatRangeKeyword_4_0 = (Keyword)cFORMAT_RANGEEnumLiteralDeclaration_4.eContents().get(0);
		
		////END annotations----------------------------------------------------------------------------------
		////BEGIN types and values---------------------------------------------------------------------------
		//enum ValueType:
		//	STRING="#string" | INTEGER="#integer" | DOUBLE="#double" | INT_RANGE="#int-range" | FORMAT_RANGE="#format-range";
		public EnumRule getRule() { return rule; }

		//STRING="#string" | INTEGER="#integer" | DOUBLE="#double" | INT_RANGE="#int-range" | FORMAT_RANGE="#format-range"
		public Alternatives getAlternatives() { return cAlternatives; }

		//STRING="#string"
		public EnumLiteralDeclaration getSTRINGEnumLiteralDeclaration_0() { return cSTRINGEnumLiteralDeclaration_0; }

		//"#string"
		public Keyword getSTRINGStringKeyword_0_0() { return cSTRINGStringKeyword_0_0; }

		//INTEGER="#integer"
		public EnumLiteralDeclaration getINTEGEREnumLiteralDeclaration_1() { return cINTEGEREnumLiteralDeclaration_1; }

		//"#integer"
		public Keyword getINTEGERIntegerKeyword_1_0() { return cINTEGERIntegerKeyword_1_0; }

		//DOUBLE="#double"
		public EnumLiteralDeclaration getDOUBLEEnumLiteralDeclaration_2() { return cDOUBLEEnumLiteralDeclaration_2; }

		//"#double"
		public Keyword getDOUBLEDoubleKeyword_2_0() { return cDOUBLEDoubleKeyword_2_0; }

		//INT_RANGE="#int-range"
		public EnumLiteralDeclaration getINT_RANGEEnumLiteralDeclaration_3() { return cINT_RANGEEnumLiteralDeclaration_3; }

		//"#int-range"
		public Keyword getINT_RANGEIntRangeKeyword_3_0() { return cINT_RANGEIntRangeKeyword_3_0; }

		//FORMAT_RANGE="#format-range"
		public EnumLiteralDeclaration getFORMAT_RANGEEnumLiteralDeclaration_4() { return cFORMAT_RANGEEnumLiteralDeclaration_4; }

		//"#format-range"
		public Keyword getFORMAT_RANGEFormatRangeKeyword_4_0() { return cFORMAT_RANGEFormatRangeKeyword_4_0; }
	}
	
	private final ModelElements pModel;
	private final ImportElements pImport;
	private final ElementElements pElement;
	private final TypeElements pType;
	private final PackageElements pPackage;
	private final DataTypeElements pDataType;
	private final DataTypeFieldElements pDataTypeField;
	private final PatternTypeElements pPatternType;
	private final EntityElements pEntity;
	private final EntityGroupElements pEntityGroup;
	private final EntityElementsElements pEntityElements;
	private final ContainerElements pContainer;
	private final FieldElements pField;
	private final ParentElements pParent;
	private final ChildElements pChild;
	private final PropertyElements pProperty;
	private final ReferenceElements pReference;
	private final ReferenceListElements pReferenceList;
	private final AnnotationElements pAnnotation;
	private final AnnotationMandatoryPropertyElements pAnnotationMandatoryProperty;
	private final AnnotationOptionalPropertyElements pAnnotationOptionalProperty;
	private final AnnotationGroupElements pAnnotationGroup;
	private final AnnotationInstanceElements pAnnotationInstance;
	private final AnnotationHiddenPropertyElements pAnnotationHiddenProperty;
	private final AnnotationValueElements pAnnotationValue;
	private final AnnotatedElements pAnnotated;
	private final GroupTypeElements pGroupType;
	private final PackageTypeElements pPackageType;
	private final DataTypeTypeElements pDataTypeType;
	private final AnnotationTypeElements pAnnotationType;
	private final EntityTypeElements pEntityType;
	private final PropertyTypeElements pPropertyType;
	private final ReferenceTypeElements pReferenceType;
	private final ReferenceListTypeElements pReferenceListType;
	private final ParentTypeElements pParentType;
	private final ChildTypeElements pChildType;
	private final AnnoTypesElements pAnnoTypes;
	private final ValueTypeElements unknownRuleValueType;
	private final StringValueElements pStringValue;
	private final IntegerValueElements pIntegerValue;
	private final DoubleValueElements pDoubleValue;
	private final RangeValueElements pRangeValue;
	private final FormatRangeValueElements pFormatRangeValue;
	private final ValueElements pValue;
	private final IntegerElements pInteger;
	private final DoubleElements pDouble;
	private final QualifiedNameWithWildcardElements pQualifiedNameWithWildcard;
	private final QualifiedNameElements pQualifiedName;
	private final TerminalRule tID;
	private final TerminalRule tINT;
	private final TerminalRule tML_COMMENT;
	private final TerminalRule tSL_COMMENT;
	private final TerminalRule tWS;
	private final TerminalRule tEND_LINE;
	private final TerminalRule tSTRING;
	private final TerminalRule tPATTERN_STRING;
	private final TerminalRule tANY_OTHER;
	
	private final Grammar grammar;

	@Inject
	public ModelDslGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pModel = new ModelElements();
		this.pImport = new ImportElements();
		this.pElement = new ElementElements();
		this.pType = new TypeElements();
		this.pPackage = new PackageElements();
		this.pDataType = new DataTypeElements();
		this.pDataTypeField = new DataTypeFieldElements();
		this.pPatternType = new PatternTypeElements();
		this.pEntity = new EntityElements();
		this.pEntityGroup = new EntityGroupElements();
		this.pEntityElements = new EntityElementsElements();
		this.pContainer = new ContainerElements();
		this.pField = new FieldElements();
		this.pParent = new ParentElements();
		this.pChild = new ChildElements();
		this.pProperty = new PropertyElements();
		this.pReference = new ReferenceElements();
		this.pReferenceList = new ReferenceListElements();
		this.pAnnotation = new AnnotationElements();
		this.pAnnotationMandatoryProperty = new AnnotationMandatoryPropertyElements();
		this.pAnnotationOptionalProperty = new AnnotationOptionalPropertyElements();
		this.pAnnotationGroup = new AnnotationGroupElements();
		this.pAnnotationInstance = new AnnotationInstanceElements();
		this.pAnnotationHiddenProperty = new AnnotationHiddenPropertyElements();
		this.pAnnotationValue = new AnnotationValueElements();
		this.pAnnotated = new AnnotatedElements();
		this.pGroupType = new GroupTypeElements();
		this.pPackageType = new PackageTypeElements();
		this.pDataTypeType = new DataTypeTypeElements();
		this.pAnnotationType = new AnnotationTypeElements();
		this.pEntityType = new EntityTypeElements();
		this.pPropertyType = new PropertyTypeElements();
		this.pReferenceType = new ReferenceTypeElements();
		this.pReferenceListType = new ReferenceListTypeElements();
		this.pParentType = new ParentTypeElements();
		this.pChildType = new ChildTypeElements();
		this.pAnnoTypes = new AnnoTypesElements();
		this.unknownRuleValueType = new ValueTypeElements();
		this.pStringValue = new StringValueElements();
		this.pIntegerValue = new IntegerValueElements();
		this.pDoubleValue = new DoubleValueElements();
		this.pRangeValue = new RangeValueElements();
		this.pFormatRangeValue = new FormatRangeValueElements();
		this.pValue = new ValueElements();
		this.pInteger = new IntegerElements();
		this.pDouble = new DoubleElements();
		this.pQualifiedNameWithWildcard = new QualifiedNameWithWildcardElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ID");
		this.tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INT");
		this.tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ML_COMMENT");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_COMMENT");
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS");
		this.tEND_LINE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "END_LINE");
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STRING");
		this.tPATTERN_STRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "PATTERN_STRING");
		this.tANY_OTHER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ANY_OTHER");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.molymer.ModelDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//Model:
	//	imports+=Import* elements+=Element*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Import:
	//	"import" importedNamespace=QualifiedNameWithWildcard;
	public ImportElements getImportAccess() {
		return pImport;
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}

	////all elements have annotations
	//Element:
	//	Type | Annotation | Package;
	public ElementElements getElementAccess() {
		return pElement;
	}
	
	public ParserRule getElementRule() {
		return getElementAccess().getRule();
	}

	//Type:
	//	Entity | DataType;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//Package:
	//	annotations+=AnnotationGroup* "package" name=ID "{" elements+=Element* "}";
	public PackageElements getPackageAccess() {
		return pPackage;
	}
	
	public ParserRule getPackageRule() {
		return getPackageAccess().getRule();
	}

	////BEGIN datatypes----------------------------------------------------------------------------------
	//DataType:
	//	annotations+=AnnotationGroup* "datatype" name=ID "{" formatedFields+=DataTypeField* "}";
	public DataTypeElements getDataTypeAccess() {
		return pDataType;
	}
	
	public ParserRule getDataTypeRule() {
		return getDataTypeAccess().getRule();
	}

	//DataTypeField:
	//	pattern=PatternType format=PATTERN_STRING | type=[DataType|QualifiedName];
	public DataTypeFieldElements getDataTypeFieldAccess() {
		return pDataTypeField;
	}
	
	public ParserRule getDataTypeFieldRule() {
		return getDataTypeFieldAccess().getRule();
	}

	//PatternType:
	//	REGEX="@regex" | DATE="@date" | NUMBER="@number";
	public PatternTypeElements getPatternTypeAccess() {
		return pPatternType;
	}
	
	public ParserRule getPatternTypeRule() {
		return getPatternTypeAccess().getRule();
	}

	////END datatypes------------------------------------------------------------------------------------
	////BEGIN entities-----------------------------------------------------------------------------------
	//Entity:
	//	annotations+=AnnotationGroup* "entity" name=ID "{" parent=Parent? elements=EntityElements groups+=EntityGroup* "}";
	public EntityElements getEntityAccess() {
		return pEntity;
	}
	
	public ParserRule getEntityRule() {
		return getEntityAccess().getRule();
	}

	//EntityGroup:
	//	"group" name=ID "{" elements=EntityElements "}";
	public EntityGroupElements getEntityGroupAccess() {
		return pEntityGroup;
	}
	
	public ParserRule getEntityGroupRule() {
		return getEntityGroupAccess().getRule();
	}

	//EntityElements:
	//	{EntityElements} (childs+=Child* & properties+=Property* & references+=Reference* & referenceLists+=ReferenceList*);
	public EntityElementsElements getEntityElementsAccess() {
		return pEntityElements;
	}
	
	public ParserRule getEntityElementsRule() {
		return getEntityElementsAccess().getRule();
	}

	////END entities-------------------------------------------------------------------------------------
	////BEGIN fields and containers----------------------------------------------------------------------
	//Container:
	//	Parent | Child;
	public ContainerElements getContainerAccess() {
		return pContainer;
	}
	
	public ParserRule getContainerRule() {
		return getContainerAccess().getRule();
	}

	//Field:
	//	Property | Reference | ReferenceList;
	public FieldElements getFieldAccess() {
		return pField;
	}
	
	public ParserRule getFieldRule() {
		return getFieldAccess().getRule();
	}

	//Parent:
	//	":parent->" type=[Entity|QualifiedName] annotations+=AnnotationGroup*;
	public ParentElements getParentAccess() {
		return pParent;
	}
	
	public ParserRule getParentRule() {
		return getParentAccess().getRule();
	}

	//Child:
	//	":childs-<" type=[Entity|QualifiedName] annotations+=AnnotationGroup*;
	public ChildElements getChildAccess() {
		return pChild;
	}
	
	public ParserRule getChildRule() {
		return getChildAccess().getRule();
	}

	//Property:
	//	name=ID optional?="?"? ":" type=[Type|QualifiedName] annotations+=AnnotationGroup*;
	public PropertyElements getPropertyAccess() {
		return pProperty;
	}
	
	public ParserRule getPropertyRule() {
		return getPropertyAccess().getRule();
	}

	//Reference:
	//	name=ID optional?="?"? "-->" entity=[Entity|QualifiedName] annotations+=AnnotationGroup*;
	public ReferenceElements getReferenceAccess() {
		return pReference;
	}
	
	public ParserRule getReferenceRule() {
		return getReferenceAccess().getRule();
	}

	//ReferenceList:
	//	name=ID ("-" reference=[Reference] "-<" | "--<") entity=[Entity|QualifiedName] annotations+=AnnotationGroup*;
	public ReferenceListElements getReferenceListAccess() {
		return pReferenceList;
	}
	
	public ParserRule getReferenceListRule() {
		return getReferenceListAccess().getRule();
	}

	////END fields and containers------------------------------------------------------------------------
	////BEGIN annotations--------------------------------------------------------------------------------
	//Annotation:
	//	"[" types+=AnnoTypes+ instances+=AnnotationInstance* "]" "annotation" name=ID "{"
	//	mandatories+=AnnotationMandatoryProperty* optionals+=AnnotationOptionalProperty* "}";
	public AnnotationElements getAnnotationAccess() {
		return pAnnotation;
	}
	
	public ParserRule getAnnotationRule() {
		return getAnnotationAccess().getRule();
	}

	//AnnotationMandatoryProperty returns AnnotationProperty:
	//	name=ID ":" (group=GroupType | type=ValueType multi?="*"?);
	public AnnotationMandatoryPropertyElements getAnnotationMandatoryPropertyAccess() {
		return pAnnotationMandatoryProperty;
	}
	
	public ParserRule getAnnotationMandatoryPropertyRule() {
		return getAnnotationMandatoryPropertyAccess().getRule();
	}

	//AnnotationOptionalProperty returns AnnotationProperty:
	//	name=ID "?" ":" (group=GroupType | type=ValueType multi?="*"?);
	public AnnotationOptionalPropertyElements getAnnotationOptionalPropertyAccess() {
		return pAnnotationOptionalProperty;
	}
	
	public ParserRule getAnnotationOptionalPropertyRule() {
		return getAnnotationOptionalPropertyAccess().getRule();
	}

	//AnnotationGroup:
	//	"[" instances+=AnnotationInstance+ "]";
	public AnnotationGroupElements getAnnotationGroupAccess() {
		return pAnnotationGroup;
	}
	
	public ParserRule getAnnotationGroupRule() {
		return getAnnotationGroupAccess().getRule();
	}

	//AnnotationInstance:
	//	annotation=[Annotation|QualifiedName] values+=AnnotationValue* ("-HIDDEN-" properties+=AnnotationHiddenProperty+
	//	"-HIDDEN-")?;
	public AnnotationInstanceElements getAnnotationInstanceAccess() {
		return pAnnotationInstance;
	}
	
	public ParserRule getAnnotationInstanceRule() {
		return getAnnotationInstanceAccess().getRule();
	}

	//AnnotationHiddenProperty:
	//	property=[AnnotationProperty] values+=[AnnotationValue]*;
	public AnnotationHiddenPropertyElements getAnnotationHiddenPropertyAccess() {
		return pAnnotationHiddenProperty;
	}
	
	public ParserRule getAnnotationHiddenPropertyRule() {
		return getAnnotationHiddenPropertyAccess().getRule();
	}

	//AnnotationValue:
	//	Value | AnnotationGroup;
	public AnnotationValueElements getAnnotationValueAccess() {
		return pAnnotationValue;
	}
	
	public ParserRule getAnnotationValueRule() {
		return getAnnotationValueAccess().getRule();
	}

	//Annotated:
	//	Element | AnnotationInstance | Field | Container;
	public AnnotatedElements getAnnotatedAccess() {
		return pAnnotated;
	}
	
	public ParserRule getAnnotatedRule() {
		return getAnnotatedAccess().getRule();
	}

	//GroupType:
	//	type="#group" name=STRING;
	public GroupTypeElements getGroupTypeAccess() {
		return pGroupType;
	}
	
	public ParserRule getGroupTypeRule() {
		return getGroupTypeAccess().getRule();
	}

	//PackageType:
	//	type="#package";
	public PackageTypeElements getPackageTypeAccess() {
		return pPackageType;
	}
	
	public ParserRule getPackageTypeRule() {
		return getPackageTypeAccess().getRule();
	}

	//DataTypeType:
	//	type="#datatype";
	public DataTypeTypeElements getDataTypeTypeAccess() {
		return pDataTypeType;
	}
	
	public ParserRule getDataTypeTypeRule() {
		return getDataTypeTypeAccess().getRule();
	}

	//AnnotationType:
	//	type="#annotation";
	public AnnotationTypeElements getAnnotationTypeAccess() {
		return pAnnotationType;
	}
	
	public ParserRule getAnnotationTypeRule() {
		return getAnnotationTypeAccess().getRule();
	}

	//EntityType:
	//	type="#entity";
	public EntityTypeElements getEntityTypeAccess() {
		return pEntityType;
	}
	
	public ParserRule getEntityTypeRule() {
		return getEntityTypeAccess().getRule();
	}

	//PropertyType:
	//	type="#property";
	public PropertyTypeElements getPropertyTypeAccess() {
		return pPropertyType;
	}
	
	public ParserRule getPropertyTypeRule() {
		return getPropertyTypeAccess().getRule();
	}

	//ReferenceType:
	//	type="#reference";
	public ReferenceTypeElements getReferenceTypeAccess() {
		return pReferenceType;
	}
	
	public ParserRule getReferenceTypeRule() {
		return getReferenceTypeAccess().getRule();
	}

	//ReferenceListType:
	//	type="#reference-list";
	public ReferenceListTypeElements getReferenceListTypeAccess() {
		return pReferenceListType;
	}
	
	public ParserRule getReferenceListTypeRule() {
		return getReferenceListTypeAccess().getRule();
	}

	//ParentType:
	//	type="#parent";
	public ParentTypeElements getParentTypeAccess() {
		return pParentType;
	}
	
	public ParserRule getParentTypeRule() {
		return getParentTypeAccess().getRule();
	}

	//ChildType:
	//	type="#child";
	public ChildTypeElements getChildTypeAccess() {
		return pChildType;
	}
	
	public ParserRule getChildTypeRule() {
		return getChildTypeAccess().getRule();
	}

	//AnnoTypes:
	//	GroupType | PackageType | DataTypeType | AnnotationType | EntityType | PropertyType | ReferenceType |
	//	ReferenceListType | ParentType | ChildType;
	public AnnoTypesElements getAnnoTypesAccess() {
		return pAnnoTypes;
	}
	
	public ParserRule getAnnoTypesRule() {
		return getAnnoTypesAccess().getRule();
	}

	////END annotations----------------------------------------------------------------------------------
	////BEGIN types and values---------------------------------------------------------------------------
	//enum ValueType:
	//	STRING="#string" | INTEGER="#integer" | DOUBLE="#double" | INT_RANGE="#int-range" | FORMAT_RANGE="#format-range";
	public ValueTypeElements getValueTypeAccess() {
		return unknownRuleValueType;
	}
	
	public EnumRule getValueTypeRule() {
		return getValueTypeAccess().getRule();
	}

	//StringValue:
	//	value=STRING;
	public StringValueElements getStringValueAccess() {
		return pStringValue;
	}
	
	public ParserRule getStringValueRule() {
		return getStringValueAccess().getRule();
	}

	//IntegerValue:
	//	value=Integer;
	public IntegerValueElements getIntegerValueAccess() {
		return pIntegerValue;
	}
	
	public ParserRule getIntegerValueRule() {
		return getIntegerValueAccess().getRule();
	}

	//DoubleValue:
	//	value=Double;
	public DoubleValueElements getDoubleValueAccess() {
		return pDoubleValue;
	}
	
	public ParserRule getDoubleValueRule() {
		return getDoubleValueAccess().getRule();
	}

	//RangeValue hidden():
	//	(from=Integer | fromInf?="*") ".." (to=Integer | toInf?="*");
	public RangeValueElements getRangeValueAccess() {
		return pRangeValue;
	}
	
	public ParserRule getRangeValueRule() {
		return getRangeValueAccess().getRule();
	}

	//FormatRangeValue hidden():
	//	from=STRING ".." to=STRING;
	public FormatRangeValueElements getFormatRangeValueAccess() {
		return pFormatRangeValue;
	}
	
	public ParserRule getFormatRangeValueRule() {
		return getFormatRangeValueAccess().getRule();
	}

	//Value:
	//	StringValue | IntegerValue | DoubleValue | RangeValue | FormatRangeValue;
	public ValueElements getValueAccess() {
		return pValue;
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}

	////END types and values-----------------------------------------------------------------------------
	//Integer returns ecore::EInt:
	//	"-"? INT;
	public IntegerElements getIntegerAccess() {
		return pInteger;
	}
	
	public ParserRule getIntegerRule() {
		return getIntegerAccess().getRule();
	}

	//Double returns ecore::EDouble:
	//	Integer "." INT;
	public DoubleElements getDoubleAccess() {
		return pDouble;
	}
	
	public ParserRule getDoubleRule() {
		return getDoubleAccess().getRule();
	}

	//QualifiedNameWithWildcard:
	//	QualifiedName ".*"?;
	public QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return pQualifiedNameWithWildcard;
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}

	//QualifiedName:
	//	ID ("." ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//terminal ID:
	//	("a".."z" | "A".."Z") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return tID;
	} 

	//terminal INT:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return tINT;
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return tML_COMMENT;
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	} 

	//terminal WS:
	//	(" " | "\t")+;
	public TerminalRule getWSRule() {
		return tWS;
	} 

	//terminal END_LINE:
	//	"\r"? "\n";
	public TerminalRule getEND_LINERule() {
		return tEND_LINE;
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"";
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	} 

	//terminal PATTERN_STRING:
	//	"\'" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getPATTERN_STRINGRule() {
		return tPATTERN_STRING;
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return tANY_OTHER;
	} 
}
