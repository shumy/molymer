/*
 * generated by Xtext
 */
package org.molymer.scoping

import com.google.inject.Inject
import org.eclipse.xtext.scoping.IScope
import org.eclipse.xtext.scoping.Scopes
import org.eclipse.xtext.naming.IQualifiedNameProvider
import org.eclipse.emf.ecore.EReference
import org.eclipse.emf.ecore.EObject
import org.molymer.modelDsl.Reference
import org.molymer.modelDsl.Entity
import org.molymer.modelDsl.ReferenceList

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 *
 */
class ModelDslScopeProvider extends org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider {
	@Inject extension IQualifiedNameProvider

	def IScope scope_ReferenceList_reference(ReferenceList referenceList, EReference ref) {
		var parentEntity = referenceList as EObject
		do {
			parentEntity = parentEntity.eContainer
		} while(!(parentEntity instanceof Entity))
		
		val entityName = parentEntity.fullyQualifiedName
		val resultFilter = referenceList.entity.eAllContents.filter[
			if(it instanceof Reference)
				return entity.fullyQualifiedName == entityName
			return false
		]
		
		return Scopes.scopeFor(resultFilter.toIterable)
	}
}
