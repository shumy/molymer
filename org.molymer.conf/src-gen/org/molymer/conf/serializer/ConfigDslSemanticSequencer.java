/*
 * generated by Xtext
 */
package org.molymer.conf.serializer;

import com.google.inject.Inject;
import com.google.inject.Provider;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.serializer.acceptor.ISemanticSequenceAcceptor;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.diagnostic.ISemanticSequencerDiagnosticProvider;
import org.eclipse.xtext.serializer.diagnostic.ISerializationDiagnostic.Acceptor;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.GenericSequencer;
import org.eclipse.xtext.serializer.sequencer.ISemanticNodeProvider.INodesForEObjectProvider;
import org.eclipse.xtext.serializer.sequencer.ISemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.molymer.conf.configDsl.Config;
import org.molymer.conf.configDsl.ConfigDslPackage;
import org.molymer.conf.configDsl.Generator;
import org.molymer.conf.services.ConfigDslGrammarAccess;

@SuppressWarnings("all")
public class ConfigDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private ConfigDslGrammarAccess grammarAccess;
	
	@Override
	public void createSequence(EObject context, EObject semanticObject) {
		if(semanticObject.eClass().getEPackage() == ConfigDslPackage.eINSTANCE) switch(semanticObject.eClass().getClassifierID()) {
			case ConfigDslPackage.CONFIG:
				sequence_Config(context, (Config) semanticObject); 
				return; 
			case ConfigDslPackage.GENERATOR:
				sequence_Generator(context, (Generator) semanticObject); 
				return; 
			}
		if (errorAcceptor != null) errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Constraint:
	 *     (
	 *         appName=STRING 
	 *         mainClass=STRING 
	 *         srcFolder=STRING 
	 *         outFolder=STRING 
	 *         selectors+=[Generator|ID]* 
	 *         generators+=Generator+
	 *     )
	 */
	protected void sequence_Config(EObject context, Config semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID bundle=STRING genClass=STRING)
	 */
	protected void sequence_Generator(EObject context, Generator semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, ConfigDslPackage.Literals.GENERATOR__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ConfigDslPackage.Literals.GENERATOR__NAME));
			if(transientValues.isValueTransient(semanticObject, ConfigDslPackage.Literals.GENERATOR__BUNDLE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ConfigDslPackage.Literals.GENERATOR__BUNDLE));
			if(transientValues.isValueTransient(semanticObject, ConfigDslPackage.Literals.GENERATOR__GEN_CLASS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ConfigDslPackage.Literals.GENERATOR__GEN_CLASS));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getGeneratorAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getGeneratorAccess().getBundleSTRINGTerminalRuleCall_2_0(), semanticObject.getBundle());
		feeder.accept(grammarAccess.getGeneratorAccess().getGenClassSTRINGTerminalRuleCall_4_0(), semanticObject.getGenClass());
		feeder.finish();
	}
}
