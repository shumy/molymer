/*
 * generated by Xtext
 */
package org.molymer.conf.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class ConfigDslGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ConfigElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Config");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConfigKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cAppNameKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cAppNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cAppNameSTRINGTerminalRuleCall_4_0 = (RuleCall)cAppNameAssignment_4.eContents().get(0);
		private final Keyword cMainClassKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cEqualsSignKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cMainClassAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cMainClassSTRINGTerminalRuleCall_7_0 = (RuleCall)cMainClassAssignment_7.eContents().get(0);
		private final Keyword cSrcFolderKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cEqualsSignKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cSrcFolderAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cSrcFolderSTRINGTerminalRuleCall_10_0 = (RuleCall)cSrcFolderAssignment_10.eContents().get(0);
		private final Keyword cOutFolderKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Keyword cEqualsSignKeyword_12 = (Keyword)cGroup.eContents().get(12);
		private final Assignment cOutFolderAssignment_13 = (Assignment)cGroup.eContents().get(13);
		private final RuleCall cOutFolderSTRINGTerminalRuleCall_13_0 = (RuleCall)cOutFolderAssignment_13.eContents().get(0);
		private final Keyword cGeneratorsKeyword_14 = (Keyword)cGroup.eContents().get(14);
		private final Keyword cLeftCurlyBracketKeyword_15 = (Keyword)cGroup.eContents().get(15);
		private final Group cGroup_16 = (Group)cGroup.eContents().get(16);
		private final Keyword cLeftSquareBracketKeyword_16_0 = (Keyword)cGroup_16.eContents().get(0);
		private final Assignment cSelectorsAssignment_16_1 = (Assignment)cGroup_16.eContents().get(1);
		private final CrossReference cSelectorsGeneratorCrossReference_16_1_0 = (CrossReference)cSelectorsAssignment_16_1.eContents().get(0);
		private final RuleCall cSelectorsGeneratorIDTerminalRuleCall_16_1_0_1 = (RuleCall)cSelectorsGeneratorCrossReference_16_1_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_16_2 = (Keyword)cGroup_16.eContents().get(2);
		private final Assignment cGeneratorsAssignment_17 = (Assignment)cGroup.eContents().get(17);
		private final RuleCall cGeneratorsGeneratorParserRuleCall_17_0 = (RuleCall)cGeneratorsAssignment_17.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_18 = (Keyword)cGroup.eContents().get(18);
		private final Keyword cRightCurlyBracketKeyword_19 = (Keyword)cGroup.eContents().get(19);
		
		//Config:
		//	"config" "{" "appName" "=" appName=STRING "mainClass" "=" mainClass=STRING "srcFolder" "=" srcFolder=STRING
		//	"outFolder" "=" outFolder=STRING "generators" "{" ("[" selectors+=[Generator]+ "]")? generators+=Generator+ "}" "}";
		@Override public ParserRule getRule() { return rule; }

		//"config" "{" "appName" "=" appName=STRING "mainClass" "=" mainClass=STRING "srcFolder" "=" srcFolder=STRING "outFolder"
		//"=" outFolder=STRING "generators" "{" ("[" selectors+=[Generator]+ "]")? generators+=Generator+ "}" "}"
		public Group getGroup() { return cGroup; }

		//"config"
		public Keyword getConfigKeyword_0() { return cConfigKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//"appName"
		public Keyword getAppNameKeyword_2() { return cAppNameKeyword_2; }

		//"="
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }

		//appName=STRING
		public Assignment getAppNameAssignment_4() { return cAppNameAssignment_4; }

		//STRING
		public RuleCall getAppNameSTRINGTerminalRuleCall_4_0() { return cAppNameSTRINGTerminalRuleCall_4_0; }

		//"mainClass"
		public Keyword getMainClassKeyword_5() { return cMainClassKeyword_5; }

		//"="
		public Keyword getEqualsSignKeyword_6() { return cEqualsSignKeyword_6; }

		//mainClass=STRING
		public Assignment getMainClassAssignment_7() { return cMainClassAssignment_7; }

		//STRING
		public RuleCall getMainClassSTRINGTerminalRuleCall_7_0() { return cMainClassSTRINGTerminalRuleCall_7_0; }

		//"srcFolder"
		public Keyword getSrcFolderKeyword_8() { return cSrcFolderKeyword_8; }

		//"="
		public Keyword getEqualsSignKeyword_9() { return cEqualsSignKeyword_9; }

		//srcFolder=STRING
		public Assignment getSrcFolderAssignment_10() { return cSrcFolderAssignment_10; }

		//STRING
		public RuleCall getSrcFolderSTRINGTerminalRuleCall_10_0() { return cSrcFolderSTRINGTerminalRuleCall_10_0; }

		//"outFolder"
		public Keyword getOutFolderKeyword_11() { return cOutFolderKeyword_11; }

		//"="
		public Keyword getEqualsSignKeyword_12() { return cEqualsSignKeyword_12; }

		//outFolder=STRING
		public Assignment getOutFolderAssignment_13() { return cOutFolderAssignment_13; }

		//STRING
		public RuleCall getOutFolderSTRINGTerminalRuleCall_13_0() { return cOutFolderSTRINGTerminalRuleCall_13_0; }

		//"generators"
		public Keyword getGeneratorsKeyword_14() { return cGeneratorsKeyword_14; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_15() { return cLeftCurlyBracketKeyword_15; }

		//("[" selectors+=[Generator]+ "]")?
		public Group getGroup_16() { return cGroup_16; }

		//"["
		public Keyword getLeftSquareBracketKeyword_16_0() { return cLeftSquareBracketKeyword_16_0; }

		//selectors+=[Generator]+
		public Assignment getSelectorsAssignment_16_1() { return cSelectorsAssignment_16_1; }

		//[Generator]
		public CrossReference getSelectorsGeneratorCrossReference_16_1_0() { return cSelectorsGeneratorCrossReference_16_1_0; }

		//ID
		public RuleCall getSelectorsGeneratorIDTerminalRuleCall_16_1_0_1() { return cSelectorsGeneratorIDTerminalRuleCall_16_1_0_1; }

		//"]"
		public Keyword getRightSquareBracketKeyword_16_2() { return cRightSquareBracketKeyword_16_2; }

		//generators+=Generator+
		public Assignment getGeneratorsAssignment_17() { return cGeneratorsAssignment_17; }

		//Generator
		public RuleCall getGeneratorsGeneratorParserRuleCall_17_0() { return cGeneratorsGeneratorParserRuleCall_17_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_18() { return cRightCurlyBracketKeyword_18; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_19() { return cRightCurlyBracketKeyword_19; }
	}

	public class GeneratorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Generator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cBundleAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBundleSTRINGTerminalRuleCall_2_0 = (RuleCall)cBundleAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cGenClassAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cGenClassSTRINGTerminalRuleCall_4_0 = (RuleCall)cGenClassAssignment_4.eContents().get(0);
		
		//Generator:
		//	name=ID "=" bundle=STRING ":" genClass= //[jvmTypes::JvmType | QualifiedName]
		//	STRING;
		@Override public ParserRule getRule() { return rule; }

		//name=ID "=" bundle=STRING ":" genClass= //[jvmTypes::JvmType | QualifiedName]
		//STRING
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//bundle=STRING
		public Assignment getBundleAssignment_2() { return cBundleAssignment_2; }

		//STRING
		public RuleCall getBundleSTRINGTerminalRuleCall_2_0() { return cBundleSTRINGTerminalRuleCall_2_0; }

		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//genClass= //[jvmTypes::JvmType | QualifiedName]
		//STRING
		public Assignment getGenClassAssignment_4() { return cGenClassAssignment_4; }

		////[jvmTypes::JvmType | QualifiedName]
		//STRING
		public RuleCall getGenClassSTRINGTerminalRuleCall_4_0() { return cGenClassSTRINGTerminalRuleCall_4_0; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ("." ID)*;
		@Override public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	
	
	private final ConfigElements pConfig;
	private final GeneratorElements pGenerator;
	private final QualifiedNameElements pQualifiedName;
	private final TerminalRule tSTRING;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public ConfigDslGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pConfig = new ConfigElements();
		this.pGenerator = new GeneratorElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STRING");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.molymer.conf.ConfigDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Config:
	//	"config" "{" "appName" "=" appName=STRING "mainClass" "=" mainClass=STRING "srcFolder" "=" srcFolder=STRING
	//	"outFolder" "=" outFolder=STRING "generators" "{" ("[" selectors+=[Generator]+ "]")? generators+=Generator+ "}" "}";
	public ConfigElements getConfigAccess() {
		return pConfig;
	}
	
	public ParserRule getConfigRule() {
		return getConfigAccess().getRule();
	}

	//Generator:
	//	name=ID "=" bundle=STRING ":" genClass= //[jvmTypes::JvmType | QualifiedName]
	//	STRING;
	public GeneratorElements getGeneratorAccess() {
		return pGenerator;
	}
	
	public ParserRule getGeneratorRule() {
		return getGeneratorAccess().getRule();
	}

	//QualifiedName:
	//	ID ("." ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"";
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
