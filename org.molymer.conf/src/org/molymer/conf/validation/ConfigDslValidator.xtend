/*
 * generated by Xtext
 */
package org.molymer.conf.validation

import org.eclipse.xtext.validation.Check
import java.util.HashSet
import org.molymer.conf.configDsl.Config
import org.molymer.conf.configDsl.Generator
import org.molymer.conf.configDsl.ConfigDslPackage
import org.eclipse.core.runtime.Platform
import org.eclipse.xtext.generator.IGenerator

class ConfigDslValidator extends AbstractConfigDslValidator {

	@Check
	def unique(Config config) {
		val uniqueSet = new HashSet<String>
		config.eContents.filter(Generator).forEach[
			if(uniqueSet.contains(name)) {
				error("Generator names have to be unique", it, ConfigDslPackage.Literals.GENERATOR__NAME)
			} else {
				uniqueSet.add(name)
			}
		]
	}
	
	@Check
	def void existsGenerator(Generator generator) {
		val bundle = Platform.getBundle(generator.bundle)
		if(bundle == null) {
			error("Bundle not found", ConfigDslPackage.Literals.GENERATOR__BUNDLE)
			return
		}
		
		try {
			val clazz = bundle.loadClass(generator.genClass)
			if(!IGenerator.isAssignableFrom(clazz)) {
				error("Doesn't implement " + IGenerator.name, ConfigDslPackage.Literals.GENERATOR__GEN_CLASS)
			}
		} catch(ClassNotFoundException e) {
			error("Class generator not found in bundle", ConfigDslPackage.Literals.GENERATOR__GEN_CLASS)
		}
	}
}
